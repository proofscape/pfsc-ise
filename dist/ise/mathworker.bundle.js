/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/browser-peers/src/dedworkerpeer.js":
/*!*********************************************************!*\
  !*** ./node_modules/browser-peers/src/dedworkerpeer.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DedicatedWorkerPeer\": () => (/* binding */ DedicatedWorkerPeer)\n/* harmony export */ });\n/* harmony import */ var _peer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./peer */ \"./node_modules/browser-peers/src/peer.js\");\n/*! browser-peers v0.1.0 | Copyright (c) 2020-2022 Steve Kieffer | MIT license */\n/* SPDX-License-Identifier: MIT */\n\n\n\n\n/*\n * This peer class supports communication between a page and a web worker,\n * specifically a *dedicated* worker.\n *\n * Usage:\n *\n *  In the page:\n *\n *      const worker = new Worker('worker.js');\n *      const peer = new DedicatedWorkerPeer(worker);\n *\n *  In the worker script (worker.js in this example):\n *\n *      const peer = new DedicatedWorkerPeer(self);\n *\n */\nclass DedicatedWorkerPeer extends _peer__WEBPACK_IMPORTED_MODULE_0__.Peer {\n\n    /*\n     * @param iface {Worker, DedicatedWorkerGlobalScope} An interface that has a `postMessage` method,\n     *   and an `onmessage` property. On the page side this will be the `Worker` instance with which you\n     *   want to communicate, and in the worker script this will be `self`.\n     */\n    constructor(iface) {\n        const [myName, nameOfPeer] = iface instanceof Worker ? ['page', 'worker'] : ['worker', 'page'];\n        super(myName);\n        this.nameOfPeer = nameOfPeer;\n        this.iface = iface;\n        this.boundMessageHandler = this.handleMessageEvent.bind(this);\n        this.activateMessaging();\n    }\n\n    // Convenient way to terminate the Worker, from the page side.\n    terminate() {\n        if (this.nameOfPeer === 'worker') {\n            this.iface.terminate();\n        }\n    }\n\n    activateMessaging() {\n        this.iface.onmessage = this.boundMessageHandler;\n    }\n\n    handleMessageEvent(event) {\n        const wrapper = event.data;\n        super.handleMessage(wrapper);\n    }\n\n    // ------------------------------------------------------------------------\n    // Override abstract base class methods\n\n    postMessageAsPeer(peerName, wrapper) {\n        wrapper.to = peerName;\n        this.iface.postMessage(wrapper);\n    }\n\n    /* Shortcut for makeRequest, so that you don't need to pass the name of the peer\n     * as the first argument.\n     */\n    postRequest(handlerDescrip, args, options) {\n        return this.makeRequest(this.nameOfPeer, handlerDescrip, args, options);\n    }\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1wZWVycy9zcmMvZGVkd29ya2VycGVlci5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZzYy1pc2UvLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1wZWVycy9zcmMvZGVkd29ya2VycGVlci5qcz82OTRkIl0sInNvdXJjZXNDb250ZW50IjpbIi8qISBicm93c2VyLXBlZXJzIHYwLjEuMCB8IENvcHlyaWdodCAoYykgMjAyMC0yMDIyIFN0ZXZlIEtpZWZmZXIgfCBNSVQgbGljZW5zZSAqL1xuLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVCAqL1xuXG5cbmltcG9ydCB7IFBlZXIgfSBmcm9tIFwiLi9wZWVyXCI7XG5cbi8qXG4gKiBUaGlzIHBlZXIgY2xhc3Mgc3VwcG9ydHMgY29tbXVuaWNhdGlvbiBiZXR3ZWVuIGEgcGFnZSBhbmQgYSB3ZWIgd29ya2VyLFxuICogc3BlY2lmaWNhbGx5IGEgKmRlZGljYXRlZCogd29ya2VyLlxuICpcbiAqIFVzYWdlOlxuICpcbiAqICBJbiB0aGUgcGFnZTpcbiAqXG4gKiAgICAgIGNvbnN0IHdvcmtlciA9IG5ldyBXb3JrZXIoJ3dvcmtlci5qcycpO1xuICogICAgICBjb25zdCBwZWVyID0gbmV3IERlZGljYXRlZFdvcmtlclBlZXIod29ya2VyKTtcbiAqXG4gKiAgSW4gdGhlIHdvcmtlciBzY3JpcHQgKHdvcmtlci5qcyBpbiB0aGlzIGV4YW1wbGUpOlxuICpcbiAqICAgICAgY29uc3QgcGVlciA9IG5ldyBEZWRpY2F0ZWRXb3JrZXJQZWVyKHNlbGYpO1xuICpcbiAqL1xuZXhwb3J0IGNsYXNzIERlZGljYXRlZFdvcmtlclBlZXIgZXh0ZW5kcyBQZWVyIHtcblxuICAgIC8qXG4gICAgICogQHBhcmFtIGlmYWNlIHtXb3JrZXIsIERlZGljYXRlZFdvcmtlckdsb2JhbFNjb3BlfSBBbiBpbnRlcmZhY2UgdGhhdCBoYXMgYSBgcG9zdE1lc3NhZ2VgIG1ldGhvZCxcbiAgICAgKiAgIGFuZCBhbiBgb25tZXNzYWdlYCBwcm9wZXJ0eS4gT24gdGhlIHBhZ2Ugc2lkZSB0aGlzIHdpbGwgYmUgdGhlIGBXb3JrZXJgIGluc3RhbmNlIHdpdGggd2hpY2ggeW91XG4gICAgICogICB3YW50IHRvIGNvbW11bmljYXRlLCBhbmQgaW4gdGhlIHdvcmtlciBzY3JpcHQgdGhpcyB3aWxsIGJlIGBzZWxmYC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpZmFjZSkge1xuICAgICAgICBjb25zdCBbbXlOYW1lLCBuYW1lT2ZQZWVyXSA9IGlmYWNlIGluc3RhbmNlb2YgV29ya2VyID8gWydwYWdlJywgJ3dvcmtlciddIDogWyd3b3JrZXInLCAncGFnZSddO1xuICAgICAgICBzdXBlcihteU5hbWUpO1xuICAgICAgICB0aGlzLm5hbWVPZlBlZXIgPSBuYW1lT2ZQZWVyO1xuICAgICAgICB0aGlzLmlmYWNlID0gaWZhY2U7XG4gICAgICAgIHRoaXMuYm91bmRNZXNzYWdlSGFuZGxlciA9IHRoaXMuaGFuZGxlTWVzc2FnZUV2ZW50LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuYWN0aXZhdGVNZXNzYWdpbmcoKTtcbiAgICB9XG5cbiAgICAvLyBDb252ZW5pZW50IHdheSB0byB0ZXJtaW5hdGUgdGhlIFdvcmtlciwgZnJvbSB0aGUgcGFnZSBzaWRlLlxuICAgIHRlcm1pbmF0ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMubmFtZU9mUGVlciA9PT0gJ3dvcmtlcicpIHtcbiAgICAgICAgICAgIHRoaXMuaWZhY2UudGVybWluYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhY3RpdmF0ZU1lc3NhZ2luZygpIHtcbiAgICAgICAgdGhpcy5pZmFjZS5vbm1lc3NhZ2UgPSB0aGlzLmJvdW5kTWVzc2FnZUhhbmRsZXI7XG4gICAgfVxuXG4gICAgaGFuZGxlTWVzc2FnZUV2ZW50KGV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHdyYXBwZXIgPSBldmVudC5kYXRhO1xuICAgICAgICBzdXBlci5oYW5kbGVNZXNzYWdlKHdyYXBwZXIpO1xuICAgIH1cblxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIE92ZXJyaWRlIGFic3RyYWN0IGJhc2UgY2xhc3MgbWV0aG9kc1xuXG4gICAgcG9zdE1lc3NhZ2VBc1BlZXIocGVlck5hbWUsIHdyYXBwZXIpIHtcbiAgICAgICAgd3JhcHBlci50byA9IHBlZXJOYW1lO1xuICAgICAgICB0aGlzLmlmYWNlLnBvc3RNZXNzYWdlKHdyYXBwZXIpO1xuICAgIH1cblxuICAgIC8qIFNob3J0Y3V0IGZvciBtYWtlUmVxdWVzdCwgc28gdGhhdCB5b3UgZG9uJ3QgbmVlZCB0byBwYXNzIHRoZSBuYW1lIG9mIHRoZSBwZWVyXG4gICAgICogYXMgdGhlIGZpcnN0IGFyZ3VtZW50LlxuICAgICAqL1xuICAgIHBvc3RSZXF1ZXN0KGhhbmRsZXJEZXNjcmlwLCBhcmdzLCBvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1ha2VSZXF1ZXN0KHRoaXMubmFtZU9mUGVlciwgaGFuZGxlckRlc2NyaXAsIGFyZ3MsIG9wdGlvbnMpO1xuICAgIH1cblxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/browser-peers/src/dedworkerpeer.js\n");

/***/ }),

/***/ "./node_modules/browser-peers/src/errors.js":
/*!**************************************************!*\
  !*** ./node_modules/browser-peers/src/errors.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"NoGroupError\": () => (/* binding */ NoGroupError),\n/* harmony export */   \"ExtensionUnavailableError\": () => (/* binding */ ExtensionUnavailableError),\n/* harmony export */   \"UnknownPeerError\": () => (/* binding */ UnknownPeerError),\n/* harmony export */   \"LackingHostPermissionError\": () => (/* binding */ LackingHostPermissionError),\n/* harmony export */   \"FetchResolvedNotOkError\": () => (/* binding */ FetchResolvedNotOkError),\n/* harmony export */   \"FetchRejectedError\": () => (/* binding */ FetchRejectedError),\n/* harmony export */   \"FetchWrongContentTypeError\": () => (/* binding */ FetchWrongContentTypeError),\n/* harmony export */   \"reconstituteError\": () => (/* binding */ reconstituteError)\n/* harmony export */ });\n/*! browser-peers v0.1.0 | Copyright (c) 2020-2022 Steve Kieffer | MIT license */\n/* SPDX-License-Identifier: MIT */\n\n/*\n * Here we define special error classes that are designed to be serializable.\n * This is so that they can be communicated via various messaging systems,\n * and then reconstructed on the other side.\n *\n * All error classes defined here MUST:\n *\n *   * have a constructor that accepts an object\n *\n *   * define `this.name` equal to their own class name (as string!)\n *\n *   * be registered in `KNOWN_ERROR_CLASSES` (see below) under their class name\n *\n *   * have a `serialize()` method that returns the JSON.stringify of an\n *     object that:\n *       - can be passed to the class's constructor, and\n *       - includes `_error_class_name: this.name`\n *\n */\n\n// ---------------------------------------------------------------------------\n// Special error classes\n\n/*\n * This error class represents cases in which we are trying to do something\n * that involves belonging to a group, but we do not (yet) belong to one.\n */\nclass NoGroupError extends Error {\n\n    constructor({ message }) {\n        super(message);\n        this.name = \"NoGroupError\";\n    }\n\n    serialize() {\n        return JSON.stringify({\n            _error_class_name: this.name,\n            message: this.message,\n        });\n    }\n\n}\n\n/*\n * This error class is intended to represent cases in which the extension has\n * become unavailable. Usually (actually the only case I'm currently aware of)\n * this is because the extension was uninstalled after that page was loaded.\n */\nclass ExtensionUnavailableError extends Error {\n\n    constructor({ message }) {\n        super(message);\n        this.name = \"ExtensionUnavailableError\";\n    }\n\n    serialize() {\n        return JSON.stringify({\n            _error_class_name: this.name,\n            message: this.message,\n        });\n    }\n\n}\n\n/* Represents cases in which a Peer is attempting to look up another\n * Peer, but cannot find it.\n */\nclass UnknownPeerError extends Error {\n\n    constructor({ message }) {\n        super(message);\n        this.name = \"UnknownPeerError\";\n    }\n\n    serialize() {\n        return JSON.stringify({\n            _error_class_name: this.name,\n            message: this.message,\n        });\n    }\n\n}\n\n/*\n * This represents cases in which the extension is lacking host permission\n * for a given URL.\n */\nclass LackingHostPermissionError extends Error {\n\n    constructor({ url }) {\n        super(`Extension lacks host permission for ${url}.`);\n        this.name = \"LackingHostPermissionError\";\n        this.url = url;\n    }\n\n    serialize() {\n        return JSON.stringify({\n            _error_class_name: this.name,\n            url: this.url,\n        });\n    }\n}\n\n/*\n * Superclass of more specific fetch error types defined below.\n * For now, not exported, since I think users only need the more specific types.\n */\nclass FetchError extends Error {\n\n    /* We record those attributes of a fetch Response object\n     * (see <https://developer.mozilla.org/en-US/docs/Web/API/Response>)\n     * that we think will be useful (and that we want to bother with right\n     * now -- maybe more in the future).\n     *\n     * Note that you may pass a Response instance itself to this constructor.\n     */\n    constructor({ ok, status, statusText, type, url, headers, contentType }) {\n        const message = `Fetch ${url} status: ${status} ${statusText}`;\n        super(message);\n        this.name = 'FetchError';\n        this.ok = ok;\n        this.status = status;\n        this.statusText = statusText;\n        this.type = type;\n        this.url = url;\n        this.contentType = contentType;\n        if (headers && headers.get) {\n            try {\n                this.contentType = headers.get('Content-Type');\n            } catch (e) {\n            }\n        }\n    }\n\n    serialize() {\n        return JSON.stringify({\n            _error_class_name: this.name,\n            ok: this.ok,\n            status: this.status,\n            statusText: this.statusText,\n            type: this.type,\n            url: this.url,\n            contentType: this.contentType,\n        });\n    }\n\n}\n\n/*\n * This error class is intended to represent cases in which a `fetch` promise\n * resolved, but returned a Response object whose `ok` property was `false`.\n *\n * On both Chrome and Firefox, this will be the case when we successfully\n * received a response, but it had an HTTP status outside the 200-299 range.\n */\nclass FetchResolvedNotOkError extends FetchError {\n\n    constructor({ ok, status, statusText, type, url }) {\n        super({ ok, status, statusText, type, url });\n        this.name = 'FetchResolvedNotOkError';\n    }\n\n}\n\n/*\n * This error class is intended to represent cases in which a `fetch` promise rejected.\n *\n * For example, on both Chrome and Firefox, this will be the case when we attempt to make a\n * cross-origin fetch, but CORS fails due to absence of Access-Control-Allow-Origin header.\n */\nclass FetchRejectedError extends FetchError {\n\n    constructor({ ok, status, statusText, type, url }) {\n        super({ ok, status, statusText, type, url });\n        this.name = 'FetchRejectedError';\n        this.message = 'Fetch rejected. ' + this.message;\n    }\n\n}\n\n/*\n * Represents cases in which a `fetch` resolved with `ok` but with an unexpected\n * Content-Type header.\n */\nclass FetchWrongContentTypeError extends FetchError {\n\n    constructor({ ok, status, statusText, type, url, headers, contentType }) {\n        super({ ok, status, statusText, type, url, headers, contentType });\n        this.name = 'FetchWrongContentTypeError';\n        this.message = `Fetch ${url} received unexpected Content-Type: ${contentType}`;\n    }\n\n}\n\n// ---------------------------------------------------------------------------\n// Reconstitution\n\nconst KNOWN_ERROR_CLASSES = new Map()\n    .set(\"FetchResolvedNotOkError\", FetchResolvedNotOkError)\n    .set(\"FetchRejectedError\", FetchRejectedError)\n    .set(\"NoGroupError\", NoGroupError)\n    .set(\"ExtensionUnavailableError\", ExtensionUnavailableError)\n    .set(\"LackingHostPermissionError\", LackingHostPermissionError)\n    .set(\"FetchWrongContentTypeError\", FetchWrongContentTypeError)\n    .set(\"UnknownPeerError\", UnknownPeerError)\n;\n\n/* Attempt to reconstitute a special error class instance from a generic Error.\n * We look at the message of the given Error. If it appears to be the serialization\n * of one of our special error classes, then we rebuild an instance based on this.\n * Otherwise we just return the given Error.\n *\n * param error: an Error instance\n * return: the reconstituted error, or the given one.\n */\nfunction reconstituteError(error) {\n    let d = null;\n    try {\n        d = JSON.parse(error.message);\n    } catch {}\n    if (d && KNOWN_ERROR_CLASSES.has(d._error_class_name)) {\n        const ClassConstructor = KNOWN_ERROR_CLASSES.get(d._error_class_name);\n        return new ClassConstructor(d);\n    }\n    return error;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/browser-peers/src/errors.js\n");

/***/ }),

/***/ "./node_modules/browser-peers/src/peer.js":
/*!************************************************!*\
  !*** ./node_modules/browser-peers/src/peer.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Peer\": () => (/* binding */ Peer)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors */ \"./node_modules/browser-peers/src/errors.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ \"./node_modules/browser-peers/src/util.js\");\n/*! browser-peers v0.1.0 | Copyright (c) 2020-2022 Steve Kieffer | MIT license */\n/* SPDX-License-Identifier: MIT */\n\n\n\n\n/* This is the abstract base class for all of our peer classes.\n * It implements everything to do with making and handling requests and responses.\n *\n * Subclasses are responsible for establishing connections between peers,\n * and for implementing the abstract `postMessageAsPeer` method defined by this\n * base class.\n *\n */\nclass Peer extends _util__WEBPACK_IMPORTED_MODULE_1__.Listenable {\n\n    /*\n     * @param name {string} a unique name for this peer, to tell it apart\n     *   from all others.\n     */\n    constructor(name) {\n        super({});\n\n        // For development and testing in settings like browser extensions under\n        // Manifest V3 (where background scripts are repeatedly terminated and\n        // restarted) it can be helpful to print debugging output in which we see\n        // the time at which a given peer was constructed.\n        this.constructionTime = (new Date()).toLocaleTimeString();\n\n        this.name = name;\n        this.handlers = new Map();\n        this.nextSeqNum = 0;\n        this.requestsBySeqNum = new Map();\n\n        this.reconstituteErrors = false;\n\n        this.readyResolve = null;\n        const self = this;\n        this.readyPromise = new Promise(resolve => {\n            self.readyResolve = resolve;\n        });\n\n        this.builtInHandlers = new Map()\n            .set('ready', this.ready.bind(this))\n        ;\n        for (let [name, handler] of this.builtInHandlers) {\n            this._addHandler(name, handler);\n        }\n    }\n\n    fromAddress() {\n        return this.name;\n    }\n\n    copyMessage(msg) {\n        return JSON.parse(JSON.stringify(msg));\n    }\n\n    // ------------------------------------------------------------------------\n    // Message handling\n\n    /* Subclasses should pass incoming request/response wrapper messages to this method.\n     *\n     * wrapper format: {\n     *   type {string} 'request' or 'response'\n     * }\n     *\n     * Furthermore, the wrapper must conform to the required format of `this.handleRequest`\n     * or `this.handleResponse`, according to the value of `wrapper.type`.\n     *\n     */\n    handleMessage(wrapper) {\n        if (wrapper.type === 'request') {\n            this.handleRequest(wrapper);\n        } else {\n            this.handleResponse(wrapper);\n        }\n    }\n\n    /*\n     * wrapper format: {\n     *   from {string} the name of the peer that sent the message,\n     *   seqNum {int} sequence number that will be used to associate response with request,\n     *   handlerDescrip {string} should be a valid descriptor string pointing to a handler\n     *     that has been registered with this peer,\n     *   args {any} will be passed to the handler\n     * }\n     */\n    handleRequest(wrapper) {\n        const peerName = wrapper.from;\n        const seqNum = wrapper.seqNum;\n        const handlerDescrip = wrapper.handlerDescrip;\n        const args = wrapper.args;\n        let handler;\n        try {\n            handler = this.lookupHandler(handlerDescrip);\n        } catch (e) {\n            this.returnRejection(peerName, seqNum, e);\n            return;\n        }\n        // Call the handler inside `Promise.resolve` so we can work with it asynchronously,\n        // even if the handler returns synchronously.\n        // We pass the whole wrapper as a second argument (which the handler may choose\n        // to ignore), in case the handler needs the \"meta\" information (such as the peer name).\n        Promise.resolve(handler(args, wrapper)).then(result => {\n            this.returnResponse(peerName, seqNum, result);\n        }).catch(reason => {\n            reason = this.checkHandlingError(reason, wrapper);\n            this.returnRejection(peerName, seqNum, reason);\n        });\n    }\n\n    /*\n     * @param peerName {string}\n     * @param seqNum {int}\n     * @param result {any}\n     */\n    returnResponse(peerName, seqNum, result) {\n        const wrapper = {\n            type: 'response',\n            from: this.fromAddress(),\n            seqNum: seqNum,\n            result: result,\n        };\n        this.postMessageAsPeer(peerName, wrapper);\n    }\n\n    /*\n     * @param peerName {string}\n     * @param seqNum {int}\n     * @param reason: {Error}\n     */\n    returnRejection(peerName, seqNum, reason) {\n        const wrapper = {\n            type: 'response',\n            from: this.fromAddress(),\n            seqNum: seqNum,\n            rejection_reason: reason.message,\n        };\n        this.postMessageAsPeer(peerName, wrapper);\n    }\n\n    consumeRequestData(seqNum) {\n        const data = this.requestsBySeqNum.get(seqNum);\n        if (data) window.clearTimeout(data.timeoutHandle);  // fails gracefully if timeout already cleared or handle is null\n        this.requestsBySeqNum.delete(seqNum);\n        return data;\n    }\n\n    /*\n     * wrapper format: {\n     *   REQUIRED:\n     *      from {string} the name of the peer that sent the message,\n     *      seqNum {int} sequence number that will be used to associate response with request,\n     *   EITHER/OR:\n     *      result {any} if the call was successful, this is the result to be returned.\n     *      rejection_reason {string} if the call failed, this is an indication of the reason.\n     * }\n     */\n    handleResponse(wrapper) {\n        const data = this.consumeRequestData(wrapper.seqNum);\n        if (!data) {\n            // Should only happen if request data already consumed due to timeout.\n            // In that case, caller already has their answer. So just do nothing.\n            return;\n        }\n        if (wrapper.rejection_reason) {\n            let e = new Error(wrapper.rejection_reason);\n            if (this.reconstituteErrors) {\n                e = (0,_errors__WEBPACK_IMPORTED_MODULE_0__.reconstituteError)(e);\n            }\n            data.reject(e);\n        } else {\n            data.resolve(wrapper.result);\n        }\n    }\n\n    // ------------------------------------------------------------------------\n    // Readiness\n    //\n    //   To be clear: this means readiness to handle requests, not to accept connections.\n    //   A peer instance is immediately ready to accept connections after construction.\n\n    /* Call this when you've finished adding handlers, in order to declare that this\n     * peer is ready to handle requests.\n     */\n    setReady() {\n        this.readyResolve();\n    }\n\n    /* This is our built-in handler for the 'ready' handler description.\n     *\n     * It returns a promise that other peers can use to wait until this peer is ready\n     * to accept connections.\n     */\n    ready() {\n        return this.readyPromise;\n    }\n\n    /* Convenience method to check the readiness of a connected peer.\n     */\n    checkReady(peerName) {\n        return this.makeRequest(peerName, 'ready', {}, false);\n    }\n\n    // ------------------------------------------------------------------------\n    // Request handlers\n\n    /* Add a handler function or handler object.\n     *\n     * Handler functions will be passed two arguments: `args` and `meta`. The first is an\n     * object passed by the client and presumably containing all the arguments required by\n     * the handler; the second is an object containing meta information about the request,\n     * such as the name of the client (which is under `meta.from`).\n     *\n     * Handlers may return a value synchronously, or may return a Promise. Either is acceptable.\n     *\n     * You may not register a handler under a reserved name, i.e. the names of any of our\n     * built-in handlers. These are defined in the constructor.\n     *\n     * @return: this instance, to support chaining.\n     */\n    addHandler(name, handler) {\n        if (this.builtInHandlers.has(name)) {\n            throw new Error(`Cannot register handler under reserved name: ${name}`);\n        }\n        this._addHandler(name, handler);\n        return this;\n    }\n\n    _addHandler(name, handler) {\n        this.handlers.set(name, handler);\n    }\n\n    /* Add a \"built-in handler,\" which really means a handler such that an error\n     * will be thrown if anyone tries to add a handler by the same name using the\n     * usual `addHandler` method.\n     *\n     * If the language supported it, we would make this a protected method, i.e.\n     * usable only by subclasses. So don't use it unless you should!\n     */\n    _addBuiltInHandler(name, handler) {\n        this.builtInHandlers.set(name, handler);\n        this._addHandler(name, handler);\n    }\n\n    /* Look up a handler, by its description.\n     *\n     * A handler description should be a string naming something that has been added as a\n     * handler for this server, or an attribute thereof, recursively.\n     *\n     * For example, if `myFunc` is a function, then after\n     *      server.addHandler('f', myFunc)\n     * 'f' is a valid description.\n     *\n     * If `myInstance` is an instance of a class that has a `doSomething` method, then\n     * after\n     *      server.addHandler('foo', myInstance)\n     * 'foo.doSomething' is a valid description.\n     *\n     * @param descrip {string} the description of the handler.\n     * @return: the handler. If the description was dotted, then the returned handler function\n     *   has the previous object in the chain bound as `this`.\n     * @throws: Error if the description does not resolve to anything, or if it does but that\n     *   thing is not a function.\n     */\n    lookupHandler(descrip) {\n        const parts = descrip.split('.');\n        let first = true;\n        let handler;\n        let prev;\n        for (let part of parts) {\n            if (first) {\n                first = false;\n                handler = this.handlers.get(part);\n            } else if (handler) {\n                prev = handler;\n                handler = handler[part];\n            } else {\n                break;\n            }\n        }\n        if (!handler) {\n            throw new Error(`Unknown handler: ${descrip}`);\n        }\n        if (typeof handler !== \"function\") {\n            throw new Error(`Handler \"${descrip}\" is not a function`);\n        }\n        if (prev) {\n            handler = handler.bind(prev);\n        }\n        return handler;\n    }\n\n    /* If you are on the same side as a peer, you can use this method to call\n     * one of its handlers directly, instead of within a request/response pair.\n     */\n    callHandler(handlerDescrip, args) {\n        const handler = this.lookupHandler(handlerDescrip);\n        return handler(args);\n    }\n\n    // ------------------------------------------------------------------------\n    // Making requests\n\n    takeNextSeqNum() {\n        const n = this.nextSeqNum;\n        this.nextSeqNum = n + 1;\n        return n;\n    }\n\n    /* Send a request to a single peer.\n     *\n     * @param peerName {string} The name of the peer to which the request should be sent.\n     * @param handlerDescrip {string} A description indicating the desired handler for the\n     *   request on the other side.\n     * @param args {obj} the arguments object to be passed to the handler on the other side.\n     *\n     * @param options: {\n     *   doReadyCheck {bool} optional, default false. Set true if you want to precede\n     *     the request with a ready check.\n     *   timeout {int} optional, default 0. Set positive if you want the request to timeout\n     *     after this many milliseconds. If 0 (or negative), will wait indefinitely.\n     *     In case of timeout, the returned promise rejects.\n     * }\n     *\n     * @return {Promise} promise that resolves with the response to the request, or rejects\n     *   with an error.\n     *\n     * See also: `broadcastRequest`.\n     */\n    makeRequest(peerName, handlerDescrip, args, options) {\n        const {\n            doReadyCheck = false,\n            timeout = 0,\n        } = options || {};\n        const seqNum = this.takeNextSeqNum();\n        const wrapper = {\n            type: 'request',\n            from: this.fromAddress(),\n            seqNum: seqNum,\n            handlerDescrip: handlerDescrip,\n            args: args,\n        };\n        const check = doReadyCheck ? this.checkReady(peerName) : Promise.resolve();\n        return check.then(() => {\n            return new Promise((resolve, reject) => {\n                const timeoutHandle = timeout < 1 ? null : window.setTimeout(() => {\n                    const data = this.consumeRequestData(seqNum);\n                    if (!data) return; // Request was already handled.\n                    reject(new Error('Peer request timed out.'));\n                }, timeout);\n                this.requestsBySeqNum.set(seqNum, {\n                    resolve: resolve,\n                    reject: reject,\n                    timeoutHandle: timeoutHandle,\n                });\n                this.postMessageAsPeer(peerName, wrapper);\n            });\n        });\n    }\n\n    /* Broadcast a request to all connected peers (or a subset, by filtering).\n     *\n     * This just performs multiple requests. Particular subclasses may have more\n     * efficient ways of broadcasting that they may prefer to use instead.\n     *\n     * @param handlerDescrip {string} A description indicating the desired handler for the\n     *   request on the other side.\n     * @param args {obj} the arguments object to be passed to the handler on the other side.\n     *\n     * @param options: {\n     *   excludeSelf {bool} If true, do not send the request to self. This is relevant for\n     *     some peer types that keep their own name in their set of peers; for those that\n     *     do not, it can be ignored.\n     *   filter {function} optional function mapping peer names to booleans. Allows to\n     *     broadcast to a subset of all connected peers, namely those mapping to `true`.\n     *     If `excludeSelf` is true, that exclusion happens first, and the given filter\n     *     is applied to what remains.\n     *   skipReadyChecks {bool} optional, default false. If false we will precede each\n     *     request with a readiness check. Set true to skip.\n     * }\n     *\n     * @return {Array[Promise]} array of the promises returned by our `makeRequest` method,\n     *   one for each peer to which a request was sent.\n     *\n     * See also: `makeRequest`.\n     *\n     * Note: While in the `makeRequest` method the ready check is skipped by default, here the\n     *   behavior is the opposite, and the ready checks are performed by default. It is felt that,\n     *   rather than being confusing, this caters to normal usage patterns. It will be normal to\n     *   be broadcasting to a collection of peers for which we are _not_ carefully maintaining state;\n     *   whereas when requesting from a single peer, we are more likely to have already performed an\n     *   initial (one-time) ready check ourselves.\n     */\n    broadcastRequest(handlerDescrip, args, options) {\n        const {\n            excludeSelf = false,\n            filter = (() => true),\n            skipReadyChecks = false\n        } = options || {};\n        const peerNames = this.getAllPeerNames().filter(name => (!excludeSelf) || name !== this.name).filter(filter);\n        const responsePromises = [];\n        for (let peerName of peerNames) {\n            responsePromises.push(this.makeRequest(peerName, handlerDescrip, args, {\n                doReadyCheck: !skipReadyChecks,\n            }));\n        }\n        return responsePromises;\n    }\n\n    // ------------------------------------------------------------------------\n    // Abstract methods subclasses MAY override\n\n    /* Subclasses should override this method if they want to use this\n     * base class's `broadcastRequest` method.\n     *\n     * @return {Array[string]} an Array of the names of all connected peers.\n     */\n    getAllPeerNames() {\n        return [];\n    }\n\n    /* This gives a chance to examine and modify a handler error, and possibly\n     * have side effects, before the error is returned.\n     *\n     * @param reason: Error thrown by request handler.\n     * @param wrapper: the wrapper message that was being handled.\n     * @return: Error instance. May be the same as the given reason, or different.\n     */\n    checkHandlingError(reason, wrapper) {\n        return reason;\n    }\n\n    // ------------------------------------------------------------------------\n    // Abstract methods subclasses MUST override\n\n    /* This is where subclasses must use their transport-specific method of getting\n     * a serializable message from one peer to another.\n     *\n     * Specifically, the message to be communicated here is one of the \"wrapper\"\n     * messages we use to represent requests and responses. The intention therefore\n     * is that it be delivered to the `handleMessage` method of the peer (which should\n     * _not_ be overridden, but should be inherited from this base class).\n     *\n     * @param peerName {string} the name of a connected peer\n     * @param wrapper {obj} the wrapper message to be posted to that peer. Format: {\n     *   type {string} equal to either 'request' or 'response', appropriately.\n     * }\n     */\n    postMessageAsPeer(peerName, wrapper) {\n        //\n    }\n\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/browser-peers/src/peer.js\n");

/***/ }),

/***/ "./node_modules/browser-peers/src/util.js":
/*!************************************************!*\
  !*** ./node_modules/browser-peers/src/util.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"xhr\": () => (/* binding */ xhr),\n/* harmony export */   \"enrichXhrParams\": () => (/* binding */ enrichXhrParams),\n/* harmony export */   \"Listenable\": () => (/* binding */ Listenable)\n/* harmony export */ });\n/*! browser-peers v0.1.0 | Copyright (c) 2020-2022 Steve Kieffer | MIT license */\n/* SPDX-License-Identifier: MIT */\n\n/* Simple XMLHttpRequest utility\n *\n * param url: the url to be accessed\n * optional params object:\n *      method: \"GET\", \"POST\" etc. Defaults to \"GET\"\n *      query: pass an object defining key-value pairs that you want added\n *          as a query string on the end of the URL\n *      form: pass an object defining key-value pairs that you want to be\n *          sent in form-encoded format in the body of the request\n *      handleAs: 'text', 'json', or 'blob'. Defaults to 'text'\n *\n * return: promise that resolves with the response from the request\n */\nfunction xhr(url, params) {\n    if (params.query) {\n        url += \"?\"+(new URLSearchParams(params.query)).toString();\n    }\n    const init = {\n        method: params.method || \"GET\"\n    };\n    if (params.form) {\n        init.body = new URLSearchParams(params.form);\n    }\n    const handleAs = params.handleAs || 'text';\n    return fetch(url, init).then(resp => {\n        if (!resp.ok) {\n            throw new Error(`HTTP error! status: ${resp.status}`);\n        }\n        if (handleAs === 'json') {\n            return resp.json();\n        } else if (handleAs === 'blob') {\n            return resp.blob();\n        } else {\n            return resp.text();\n        }\n    });\n}\n\n/* Add extra key-value arguments to an XHR.\n *\n * @param givenParams: a `params` arg which would have been passed to the\n *   `xhr` function defined in this module.\n * @param extraPairs: an object defining extra key-value args that you want to\n *   add to the request.\n * @return: a _new_ params object. The given one is not modified.\n *   The extra pairs are placed in `params.query` if `query` was defined in the\n *   givenParams, else in `params.form` if that was defined. If neither was defined,\n *   then we define `params.query` and put the extra pairs in there.\n */\nfunction enrichXhrParams(givenParams, extraPairs) {\n    const params = {};\n    Object.assign(params, givenParams || {});\n    if (params.query) {\n        Object.assign(params.query, extraPairs);\n    } else if (params.form) {\n        Object.assign(params.form, extraPairs);\n    } else {\n        params.query = {};\n        Object.assign(params.query, extraPairs);\n    }\n    return params;\n}\n\nclass Listenable {\n\n    constructor(listeners) {\n        this.listeners = listeners;\n    }\n\n    on(eventType, callback) {\n        const cbs = this.listeners[eventType] || [];\n        cbs.push(callback);\n        this.listeners[eventType] = cbs;\n    }\n\n    off(eventType, callback) {\n        const cbs = this.listeners[eventType] || [];\n        const i0 = cbs.indexOf(callback);\n        if (i0 >= 0) {\n            cbs.splice(i0, 1);\n            this.listeners[eventType] = cbs;\n        }\n    }\n\n    dispatch(event) {\n        /* Subtle point: In general, we are always careful not to modify an\n         * iterable while we are in the process of iterating over it. Here, we don't\n         * know whether a callback might `off` itself as a part of its process,\n         * thereby modifying our array of listeners while we are iterating over it!\n         * Therefore, to be safe, we have to iterate over a _copy_ of our array of\n         * registered listeners. */\n        const cbs = (this.listeners[event.type] || []).slice();\n        for (let cb of cbs) {\n            cb(event);\n        }\n    }\n\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1wZWVycy9zcmMvdXRpbC5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZzYy1pc2UvLi9ub2RlX21vZHVsZXMvYnJvd3Nlci1wZWVycy9zcmMvdXRpbC5qcz8xYWI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qISBicm93c2VyLXBlZXJzIHYwLjEuMCB8IENvcHlyaWdodCAoYykgMjAyMC0yMDIyIFN0ZXZlIEtpZWZmZXIgfCBNSVQgbGljZW5zZSAqL1xuLyogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVCAqL1xuXG4vKiBTaW1wbGUgWE1MSHR0cFJlcXVlc3QgdXRpbGl0eVxuICpcbiAqIHBhcmFtIHVybDogdGhlIHVybCB0byBiZSBhY2Nlc3NlZFxuICogb3B0aW9uYWwgcGFyYW1zIG9iamVjdDpcbiAqICAgICAgbWV0aG9kOiBcIkdFVFwiLCBcIlBPU1RcIiBldGMuIERlZmF1bHRzIHRvIFwiR0VUXCJcbiAqICAgICAgcXVlcnk6IHBhc3MgYW4gb2JqZWN0IGRlZmluaW5nIGtleS12YWx1ZSBwYWlycyB0aGF0IHlvdSB3YW50IGFkZGVkXG4gKiAgICAgICAgICBhcyBhIHF1ZXJ5IHN0cmluZyBvbiB0aGUgZW5kIG9mIHRoZSBVUkxcbiAqICAgICAgZm9ybTogcGFzcyBhbiBvYmplY3QgZGVmaW5pbmcga2V5LXZhbHVlIHBhaXJzIHRoYXQgeW91IHdhbnQgdG8gYmVcbiAqICAgICAgICAgIHNlbnQgaW4gZm9ybS1lbmNvZGVkIGZvcm1hdCBpbiB0aGUgYm9keSBvZiB0aGUgcmVxdWVzdFxuICogICAgICBoYW5kbGVBczogJ3RleHQnLCAnanNvbicsIG9yICdibG9iJy4gRGVmYXVsdHMgdG8gJ3RleHQnXG4gKlxuICogcmV0dXJuOiBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcmVzcG9uc2UgZnJvbSB0aGUgcmVxdWVzdFxuICovXG5leHBvcnQgZnVuY3Rpb24geGhyKHVybCwgcGFyYW1zKSB7XG4gICAgaWYgKHBhcmFtcy5xdWVyeSkge1xuICAgICAgICB1cmwgKz0gXCI/XCIrKG5ldyBVUkxTZWFyY2hQYXJhbXMocGFyYW1zLnF1ZXJ5KSkudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgY29uc3QgaW5pdCA9IHtcbiAgICAgICAgbWV0aG9kOiBwYXJhbXMubWV0aG9kIHx8IFwiR0VUXCJcbiAgICB9O1xuICAgIGlmIChwYXJhbXMuZm9ybSkge1xuICAgICAgICBpbml0LmJvZHkgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHBhcmFtcy5mb3JtKTtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlQXMgPSBwYXJhbXMuaGFuZGxlQXMgfHwgJ3RleHQnO1xuICAgIHJldHVybiBmZXRjaCh1cmwsIGluaXQpLnRoZW4ocmVzcCA9PiB7XG4gICAgICAgIGlmICghcmVzcC5vaykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQIGVycm9yISBzdGF0dXM6ICR7cmVzcC5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGhhbmRsZUFzID09PSAnanNvbicpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNwLmpzb24oKTtcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVBcyA9PT0gJ2Jsb2InKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcC5ibG9iKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcmVzcC50ZXh0KCk7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuLyogQWRkIGV4dHJhIGtleS12YWx1ZSBhcmd1bWVudHMgdG8gYW4gWEhSLlxuICpcbiAqIEBwYXJhbSBnaXZlblBhcmFtczogYSBgcGFyYW1zYCBhcmcgd2hpY2ggd291bGQgaGF2ZSBiZWVuIHBhc3NlZCB0byB0aGVcbiAqICAgYHhocmAgZnVuY3Rpb24gZGVmaW5lZCBpbiB0aGlzIG1vZHVsZS5cbiAqIEBwYXJhbSBleHRyYVBhaXJzOiBhbiBvYmplY3QgZGVmaW5pbmcgZXh0cmEga2V5LXZhbHVlIGFyZ3MgdGhhdCB5b3Ugd2FudCB0b1xuICogICBhZGQgdG8gdGhlIHJlcXVlc3QuXG4gKiBAcmV0dXJuOiBhIF9uZXdfIHBhcmFtcyBvYmplY3QuIFRoZSBnaXZlbiBvbmUgaXMgbm90IG1vZGlmaWVkLlxuICogICBUaGUgZXh0cmEgcGFpcnMgYXJlIHBsYWNlZCBpbiBgcGFyYW1zLnF1ZXJ5YCBpZiBgcXVlcnlgIHdhcyBkZWZpbmVkIGluIHRoZVxuICogICBnaXZlblBhcmFtcywgZWxzZSBpbiBgcGFyYW1zLmZvcm1gIGlmIHRoYXQgd2FzIGRlZmluZWQuIElmIG5laXRoZXIgd2FzIGRlZmluZWQsXG4gKiAgIHRoZW4gd2UgZGVmaW5lIGBwYXJhbXMucXVlcnlgIGFuZCBwdXQgdGhlIGV4dHJhIHBhaXJzIGluIHRoZXJlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5yaWNoWGhyUGFyYW1zKGdpdmVuUGFyYW1zLCBleHRyYVBhaXJzKSB7XG4gICAgY29uc3QgcGFyYW1zID0ge307XG4gICAgT2JqZWN0LmFzc2lnbihwYXJhbXMsIGdpdmVuUGFyYW1zIHx8IHt9KTtcbiAgICBpZiAocGFyYW1zLnF1ZXJ5KSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLnF1ZXJ5LCBleHRyYVBhaXJzKTtcbiAgICB9IGVsc2UgaWYgKHBhcmFtcy5mb3JtKSB7XG4gICAgICAgIE9iamVjdC5hc3NpZ24ocGFyYW1zLmZvcm0sIGV4dHJhUGFpcnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtcy5xdWVyeSA9IHt9O1xuICAgICAgICBPYmplY3QuYXNzaWduKHBhcmFtcy5xdWVyeSwgZXh0cmFQYWlycyk7XG4gICAgfVxuICAgIHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0ZW5hYmxlIHtcblxuICAgIGNvbnN0cnVjdG9yKGxpc3RlbmVycykge1xuICAgICAgICB0aGlzLmxpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICB9XG5cbiAgICBvbihldmVudFR5cGUsIGNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGNicyA9IHRoaXMubGlzdGVuZXJzW2V2ZW50VHlwZV0gfHwgW107XG4gICAgICAgIGNicy5wdXNoKGNhbGxiYWNrKTtcbiAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IGNicztcbiAgICB9XG5cbiAgICBvZmYoZXZlbnRUeXBlLCBjYWxsYmFjaykge1xuICAgICAgICBjb25zdCBjYnMgPSB0aGlzLmxpc3RlbmVyc1tldmVudFR5cGVdIHx8IFtdO1xuICAgICAgICBjb25zdCBpMCA9IGNicy5pbmRleE9mKGNhbGxiYWNrKTtcbiAgICAgICAgaWYgKGkwID49IDApIHtcbiAgICAgICAgICAgIGNicy5zcGxpY2UoaTAsIDEpO1xuICAgICAgICAgICAgdGhpcy5saXN0ZW5lcnNbZXZlbnRUeXBlXSA9IGNicztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRpc3BhdGNoKGV2ZW50KSB7XG4gICAgICAgIC8qIFN1YnRsZSBwb2ludDogSW4gZ2VuZXJhbCwgd2UgYXJlIGFsd2F5cyBjYXJlZnVsIG5vdCB0byBtb2RpZnkgYW5cbiAgICAgICAgICogaXRlcmFibGUgd2hpbGUgd2UgYXJlIGluIHRoZSBwcm9jZXNzIG9mIGl0ZXJhdGluZyBvdmVyIGl0LiBIZXJlLCB3ZSBkb24ndFxuICAgICAgICAgKiBrbm93IHdoZXRoZXIgYSBjYWxsYmFjayBtaWdodCBgb2ZmYCBpdHNlbGYgYXMgYSBwYXJ0IG9mIGl0cyBwcm9jZXNzLFxuICAgICAgICAgKiB0aGVyZWJ5IG1vZGlmeWluZyBvdXIgYXJyYXkgb2YgbGlzdGVuZXJzIHdoaWxlIHdlIGFyZSBpdGVyYXRpbmcgb3ZlciBpdCFcbiAgICAgICAgICogVGhlcmVmb3JlLCB0byBiZSBzYWZlLCB3ZSBoYXZlIHRvIGl0ZXJhdGUgb3ZlciBhIF9jb3B5XyBvZiBvdXIgYXJyYXkgb2ZcbiAgICAgICAgICogcmVnaXN0ZXJlZCBsaXN0ZW5lcnMuICovXG4gICAgICAgIGNvbnN0IGNicyA9ICh0aGlzLmxpc3RlbmVyc1tldmVudC50eXBlXSB8fCBbXSkuc2xpY2UoKTtcbiAgICAgICAgZm9yIChsZXQgY2Igb2YgY2JzKSB7XG4gICAgICAgICAgICBjYihldmVudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/browser-peers/src/util.js\n");

/***/ }),

/***/ "./src/mathworker.js":
/*!***************************!*\
  !*** ./src/mathworker.js ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var browser_peers_src_dedworkerpeer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! browser-peers/src/dedworkerpeer */ \"./node_modules/browser-peers/src/dedworkerpeer.js\");\n/* ------------------------------------------------------------------------- *\n *  Proofscape Integrated Study Environment (PISE)                           *\n *                                                                           *\n *  Copyright (c) 2018-2022 Proofscape contributors                          *\n *                                                                           *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");          *\n *  you may not use this file except in compliance with the License.         *\n *  You may obtain a copy of the License at                                  *\n *                                                                           *\n *      http://www.apache.org/licenses/LICENSE-2.0                           *\n *                                                                           *\n *  Unless required by applicable law or agreed to in writing, software      *\n *  distributed under the License is distributed on an \"AS IS\" BASIS,        *\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. *\n *  See the License for the specific language governing permissions and      *\n *  limitations under the License.                                           *\n * ------------------------------------------------------------------------- */\n\n\n\n\n\nconst pyodidePackages = [\n    \"micropip\",\n    \"Jinja2\",\n    \"mpmath\",\n];\n\n\nconst pyodideImports = [\n    'import pfsc_examp',\n];\n\n\nfunction echo(args, meta) {\n    console.log('echo', args, meta);\n    return 'echoed';\n}\n\n\nfunction ping(args) {\n    return 'pong';\n}\n\n\nfunction startup(args) {\n    self.pfscExampConfig = args.pfscExampConfig;\n    let indexURL = args.pyodideIndexURL;\n    if (!indexURL.endsWith('/')) {\n        indexURL += '/';\n    }\n    const pyodideJsURL = indexURL + 'pyodide.js';\n    importScripts(pyodideJsURL);\n\n    let code = 'import micropip\\n';\n\n    const noDeps = args.micropipNoDeps ? ', deps=False' : '';\n    code += `await micropip.install(${JSON.stringify(args.micropipInstallTargetsArray)}${noDeps})\\n`;\n\n    for (let imp of pyodideImports) {\n        code += `${imp}\\n`;\n    }\n\n    // Final expression makes the return value.\n    // (See https://pyodide.org/en/stable/usage/api/js-api.html#pyodide.runPythonAsync)\n    // We grab info about the installed packages.\n    code += '{k:vars(v) for k, v in micropip.list().items()}\\n';\n\n    console.debug(code);\n\n    self.pyoReady = new Promise(resolve => {\n        loadPyodide({indexURL: indexURL}).then(pyodide => {\n            self.pyodide = pyodide;\n            pyodide.loadPackage(pyodidePackages).then(() => {\n                pyodide.runPythonAsync(code).then(pkginfoProxy => {\n                    const pkginfo = pkginfoProxy.toJs();\n                    pkginfoProxy.destroy();\n                    resolve({\n                        status: 0,\n                        message: 'loaded Pyodide and all packages',\n                        // Up to v0.21.2, it's pyodide.version. In v0.21.3, it's pyodide.default.\n                        pyodideVersion: pyodide.default || pyodide.version,\n                        // pkginfo is a Map, in which package names point to Maps, in which\n                        // the keys are 'name', 'version', and 'source'.\n                        pkginfo: pkginfo,\n                    });\n                });\n            });\n        });\n    });\n    return self.pyoReady;\n}\n\n\n/* Make a new PyProxy for a widget.\n *\n * args: {\n *   info: the info object that defines the widget,\n *   paneId: the id of the pane where this representative is to be active.\n * }\n *\n * return: promise that resolves with new total number of proxies for this widget\n */\nasync function makePyProxy(args) {\n    await self.pyoReady;\n    const info = args.info;\n    const paneId = args.paneId;\n    const uid = info['uid'];\n    const w = self.pfscisehub.notesManager.ensureWidget(uid);\n    const makeObject = self.pyodide.globals.get('pfsc_examp').make_examp_generator_obj_from_js;\n    const obj = makeObject(info, paneId);\n    makeObject.destroy();  // destroy proxy of factory func to avoid memory leak\n    w.addPyProxy(paneId, obj);\n    return w.getNumProxies();\n}\n\n\n/* Destroy a single PyProxy for a widget. If this was the widget's\n * last proxy, also delete the widget from the NotesManager.\n *\n * args: {\n *   uid: the uid of the widget that wants to destroy a PyProxy\n *   paneId: the id of the pane whose proxy should be destroyed\n * }\n *\n * return: the new total number of proxies for this widget\n */\nfunction destroyPyProxy(args) {\n    const nm = self.pfscisehub.notesManager;\n    const uid = args.uid;\n    const paneId = args.paneId;\n    const w = nm.getWidget(uid);\n    if (w) {\n        w.destroyProxy(paneId);\n        const n = w.getNumProxies();\n        if (n === 0) {\n            nm.deleteWidget(uid);\n        }\n        return n;\n    } else {\n        return 0;\n    }\n}\n\n/* Rebuild an examp widget.\n *\n * args: {\n *   uid: the widget uid,\n *   paneId: the id of the pane where we want to rebuild\n *   value: optional, new raw value to pass to this widget's `build` method\n *   writeHtml: bool, optional, default false: if true, ask the widget to\n *     generate its (new) HTML\n * }\n *\n * return: promise that resolves with the response from the `rebuild_examp_generator_from_js()`\n *   function in the pfsc-examp python package. This is a formatted object, which contains\n *   an error level, error message, and result value if successful.\n */\nasync function rebuild(args) {\n    await self.pyoReady;\n    const {\n        uid,\n        paneId,\n        value = null,\n        writeHtml = false,\n    } = args;\n    const nm = self.pfscisehub.notesManager;\n    const w = nm.getWidget(uid);\n    const obj = w.getPyProxyCopy(paneId);\n    const rebuildFunc = self.pyodide.globals.get('pfsc_examp').rebuild_examp_generator_from_js;\n    const response = rebuildFunc.callKwargs(obj, {value: value, write_html: writeHtml});\n    // Destroy PyProxy of `rebuild` to avoid memory leak.\n    // `response` object does not need to be destroyed, since it was converted with `to_js()`\n    // on the python side.\n    rebuildFunc.destroy();\n    // `response` is a Map. Convert to an Object.\n    const respObj = Object.fromEntries(response);\n    return respObj;\n}\n\n\nclass NotesManager {\n\n    constructor() {\n        this.widgets = new Map();\n    }\n\n    getWidget(uid) {\n        return this.widgets.get(uid);\n    }\n\n    ensureWidget(uid) {\n        if (this.widgets.has(uid)) {\n            return this.widgets.get(uid);\n        } else {\n            const w = new Widget(uid);\n            this.widgets.set(uid, w);\n            return w;\n        }\n    }\n\n    deleteWidget(uid) {\n        this.widgets.delete(uid);\n    }\n\n}\n\n\nclass Widget {\n\n    constructor(uid) {\n        this.uid = uid;\n        this.pyProxiesByPaneId = new Map();\n    }\n\n    addPyProxy(paneId, proxy) {\n        this.pyProxiesByPaneId.set(paneId, proxy);\n    }\n\n    /* This method is intended for use by Python code running in Pyodide.\n     * The reason for returning a *copy* of the PyProxy object we have stored\n     * is that this prevents the PyProxy from being destroyed as a result of\n     * being passed back to the Py side.\n     * See:\n     *   https://pyodide.org/en/stable/usage/type-conversions.html#calling-javascript-functions-from-python\n     */\n    getPyProxyCopy(paneId) {\n        const proxy = this.pyProxiesByPaneId.get(paneId);\n        return proxy.copy();\n    }\n\n    getNumProxies() {\n        return this.pyProxiesByPaneId.size;\n    }\n\n    destroyProxy(paneId) {\n        const p = this.pyProxiesByPaneId.get(paneId);\n        if (p) {\n            p.destroy();\n            this.pyProxiesByPaneId.delete(paneId);\n        }\n    }\n\n}\n\n\n/* We build a dummy environment so that the same code that was designed to\n * work with Pyodide running in the main page can also work here.\n */\nself.pfscisehub = {\n    notesManager: new NotesManager(),\n};\n\n\nconst peer = new browser_peers_src_dedworkerpeer__WEBPACK_IMPORTED_MODULE_0__.DedicatedWorkerPeer(self);\npeer.addHandler('echo', echo);\npeer.addHandler('ping', ping);\npeer.addHandler('startup', startup);\npeer.addHandler('makePyProxy', makePyProxy);\npeer.addHandler('destroyPyProxy', destroyPyProxy);\npeer.addHandler('rebuild', rebuild);\npeer.setReady();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbWF0aHdvcmtlci5qcy5qcyIsIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGZzYy1pc2UvLi9zcmMvbWF0aHdvcmtlci5qcz84NTRlIl0sInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKlxuICogIFByb29mc2NhcGUgSW50ZWdyYXRlZCBTdHVkeSBFbnZpcm9ubWVudCAoUElTRSkgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBDb3B5cmlnaHQgKGMpIDIwMTgtMjAyMiBQcm9vZnNjYXBlIGNvbnRyaWJ1dG9ycyAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgICAgICAgICAgKlxuICogIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gICAgICAgICAqXG4gKiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKlxuICogICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAgICAgICAgICAgICAgICAgICAgICAgICAgICAqXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqICBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlICAgICAgKlxuICogIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgICAgICAgICpcbiAqICBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gKlxuICogIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgICAgICAqXG4gKiAgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICpcbiAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXG5pbXBvcnQgeyBEZWRpY2F0ZWRXb3JrZXJQZWVyIH0gZnJvbSBcImJyb3dzZXItcGVlcnMvc3JjL2RlZHdvcmtlcnBlZXJcIjtcblxuXG5jb25zdCBweW9kaWRlUGFja2FnZXMgPSBbXG4gICAgXCJtaWNyb3BpcFwiLFxuICAgIFwiSmluamEyXCIsXG4gICAgXCJtcG1hdGhcIixcbl07XG5cblxuY29uc3QgcHlvZGlkZUltcG9ydHMgPSBbXG4gICAgJ2ltcG9ydCBwZnNjX2V4YW1wJyxcbl07XG5cblxuZnVuY3Rpb24gZWNobyhhcmdzLCBtZXRhKSB7XG4gICAgY29uc29sZS5sb2coJ2VjaG8nLCBhcmdzLCBtZXRhKTtcbiAgICByZXR1cm4gJ2VjaG9lZCc7XG59XG5cblxuZnVuY3Rpb24gcGluZyhhcmdzKSB7XG4gICAgcmV0dXJuICdwb25nJztcbn1cblxuXG5mdW5jdGlvbiBzdGFydHVwKGFyZ3MpIHtcbiAgICBzZWxmLnBmc2NFeGFtcENvbmZpZyA9IGFyZ3MucGZzY0V4YW1wQ29uZmlnO1xuICAgIGxldCBpbmRleFVSTCA9IGFyZ3MucHlvZGlkZUluZGV4VVJMO1xuICAgIGlmICghaW5kZXhVUkwuZW5kc1dpdGgoJy8nKSkge1xuICAgICAgICBpbmRleFVSTCArPSAnLyc7XG4gICAgfVxuICAgIGNvbnN0IHB5b2RpZGVKc1VSTCA9IGluZGV4VVJMICsgJ3B5b2RpZGUuanMnO1xuICAgIGltcG9ydFNjcmlwdHMocHlvZGlkZUpzVVJMKTtcblxuICAgIGxldCBjb2RlID0gJ2ltcG9ydCBtaWNyb3BpcFxcbic7XG5cbiAgICBjb25zdCBub0RlcHMgPSBhcmdzLm1pY3JvcGlwTm9EZXBzID8gJywgZGVwcz1GYWxzZScgOiAnJztcbiAgICBjb2RlICs9IGBhd2FpdCBtaWNyb3BpcC5pbnN0YWxsKCR7SlNPTi5zdHJpbmdpZnkoYXJncy5taWNyb3BpcEluc3RhbGxUYXJnZXRzQXJyYXkpfSR7bm9EZXBzfSlcXG5gO1xuXG4gICAgZm9yIChsZXQgaW1wIG9mIHB5b2RpZGVJbXBvcnRzKSB7XG4gICAgICAgIGNvZGUgKz0gYCR7aW1wfVxcbmA7XG4gICAgfVxuXG4gICAgLy8gRmluYWwgZXhwcmVzc2lvbiBtYWtlcyB0aGUgcmV0dXJuIHZhbHVlLlxuICAgIC8vIChTZWUgaHR0cHM6Ly9weW9kaWRlLm9yZy9lbi9zdGFibGUvdXNhZ2UvYXBpL2pzLWFwaS5odG1sI3B5b2RpZGUucnVuUHl0aG9uQXN5bmMpXG4gICAgLy8gV2UgZ3JhYiBpbmZvIGFib3V0IHRoZSBpbnN0YWxsZWQgcGFja2FnZXMuXG4gICAgY29kZSArPSAne2s6dmFycyh2KSBmb3IgaywgdiBpbiBtaWNyb3BpcC5saXN0KCkuaXRlbXMoKX1cXG4nO1xuXG4gICAgY29uc29sZS5kZWJ1Zyhjb2RlKTtcblxuICAgIHNlbGYucHlvUmVhZHkgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgbG9hZFB5b2RpZGUoe2luZGV4VVJMOiBpbmRleFVSTH0pLnRoZW4ocHlvZGlkZSA9PiB7XG4gICAgICAgICAgICBzZWxmLnB5b2RpZGUgPSBweW9kaWRlO1xuICAgICAgICAgICAgcHlvZGlkZS5sb2FkUGFja2FnZShweW9kaWRlUGFja2FnZXMpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHB5b2RpZGUucnVuUHl0aG9uQXN5bmMoY29kZSkudGhlbihwa2dpbmZvUHJveHkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwa2dpbmZvID0gcGtnaW5mb1Byb3h5LnRvSnMoKTtcbiAgICAgICAgICAgICAgICAgICAgcGtnaW5mb1Byb3h5LmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0dXM6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnbG9hZGVkIFB5b2RpZGUgYW5kIGFsbCBwYWNrYWdlcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBVcCB0byB2MC4yMS4yLCBpdCdzIHB5b2RpZGUudmVyc2lvbi4gSW4gdjAuMjEuMywgaXQncyBweW9kaWRlLmRlZmF1bHQuXG4gICAgICAgICAgICAgICAgICAgICAgICBweW9kaWRlVmVyc2lvbjogcHlvZGlkZS5kZWZhdWx0IHx8IHB5b2RpZGUudmVyc2lvbixcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBrZ2luZm8gaXMgYSBNYXAsIGluIHdoaWNoIHBhY2thZ2UgbmFtZXMgcG9pbnQgdG8gTWFwcywgaW4gd2hpY2hcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoZSBrZXlzIGFyZSAnbmFtZScsICd2ZXJzaW9uJywgYW5kICdzb3VyY2UnLlxuICAgICAgICAgICAgICAgICAgICAgICAgcGtnaW5mbzogcGtnaW5mbyxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHNlbGYucHlvUmVhZHk7XG59XG5cblxuLyogTWFrZSBhIG5ldyBQeVByb3h5IGZvciBhIHdpZGdldC5cbiAqXG4gKiBhcmdzOiB7XG4gKiAgIGluZm86IHRoZSBpbmZvIG9iamVjdCB0aGF0IGRlZmluZXMgdGhlIHdpZGdldCxcbiAqICAgcGFuZUlkOiB0aGUgaWQgb2YgdGhlIHBhbmUgd2hlcmUgdGhpcyByZXByZXNlbnRhdGl2ZSBpcyB0byBiZSBhY3RpdmUuXG4gKiB9XG4gKlxuICogcmV0dXJuOiBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBuZXcgdG90YWwgbnVtYmVyIG9mIHByb3hpZXMgZm9yIHRoaXMgd2lkZ2V0XG4gKi9cbmFzeW5jIGZ1bmN0aW9uIG1ha2VQeVByb3h5KGFyZ3MpIHtcbiAgICBhd2FpdCBzZWxmLnB5b1JlYWR5O1xuICAgIGNvbnN0IGluZm8gPSBhcmdzLmluZm87XG4gICAgY29uc3QgcGFuZUlkID0gYXJncy5wYW5lSWQ7XG4gICAgY29uc3QgdWlkID0gaW5mb1sndWlkJ107XG4gICAgY29uc3QgdyA9IHNlbGYucGZzY2lzZWh1Yi5ub3Rlc01hbmFnZXIuZW5zdXJlV2lkZ2V0KHVpZCk7XG4gICAgY29uc3QgbWFrZU9iamVjdCA9IHNlbGYucHlvZGlkZS5nbG9iYWxzLmdldCgncGZzY19leGFtcCcpLm1ha2VfZXhhbXBfZ2VuZXJhdG9yX29ial9mcm9tX2pzO1xuICAgIGNvbnN0IG9iaiA9IG1ha2VPYmplY3QoaW5mbywgcGFuZUlkKTtcbiAgICBtYWtlT2JqZWN0LmRlc3Ryb3koKTsgIC8vIGRlc3Ryb3kgcHJveHkgb2YgZmFjdG9yeSBmdW5jIHRvIGF2b2lkIG1lbW9yeSBsZWFrXG4gICAgdy5hZGRQeVByb3h5KHBhbmVJZCwgb2JqKTtcbiAgICByZXR1cm4gdy5nZXROdW1Qcm94aWVzKCk7XG59XG5cblxuLyogRGVzdHJveSBhIHNpbmdsZSBQeVByb3h5IGZvciBhIHdpZGdldC4gSWYgdGhpcyB3YXMgdGhlIHdpZGdldCdzXG4gKiBsYXN0IHByb3h5LCBhbHNvIGRlbGV0ZSB0aGUgd2lkZ2V0IGZyb20gdGhlIE5vdGVzTWFuYWdlci5cbiAqXG4gKiBhcmdzOiB7XG4gKiAgIHVpZDogdGhlIHVpZCBvZiB0aGUgd2lkZ2V0IHRoYXQgd2FudHMgdG8gZGVzdHJveSBhIFB5UHJveHlcbiAqICAgcGFuZUlkOiB0aGUgaWQgb2YgdGhlIHBhbmUgd2hvc2UgcHJveHkgc2hvdWxkIGJlIGRlc3Ryb3llZFxuICogfVxuICpcbiAqIHJldHVybjogdGhlIG5ldyB0b3RhbCBudW1iZXIgb2YgcHJveGllcyBmb3IgdGhpcyB3aWRnZXRcbiAqL1xuZnVuY3Rpb24gZGVzdHJveVB5UHJveHkoYXJncykge1xuICAgIGNvbnN0IG5tID0gc2VsZi5wZnNjaXNlaHViLm5vdGVzTWFuYWdlcjtcbiAgICBjb25zdCB1aWQgPSBhcmdzLnVpZDtcbiAgICBjb25zdCBwYW5lSWQgPSBhcmdzLnBhbmVJZDtcbiAgICBjb25zdCB3ID0gbm0uZ2V0V2lkZ2V0KHVpZCk7XG4gICAgaWYgKHcpIHtcbiAgICAgICAgdy5kZXN0cm95UHJveHkocGFuZUlkKTtcbiAgICAgICAgY29uc3QgbiA9IHcuZ2V0TnVtUHJveGllcygpO1xuICAgICAgICBpZiAobiA9PT0gMCkge1xuICAgICAgICAgICAgbm0uZGVsZXRlV2lkZ2V0KHVpZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG47XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufVxuXG4vKiBSZWJ1aWxkIGFuIGV4YW1wIHdpZGdldC5cbiAqXG4gKiBhcmdzOiB7XG4gKiAgIHVpZDogdGhlIHdpZGdldCB1aWQsXG4gKiAgIHBhbmVJZDogdGhlIGlkIG9mIHRoZSBwYW5lIHdoZXJlIHdlIHdhbnQgdG8gcmVidWlsZFxuICogICB2YWx1ZTogb3B0aW9uYWwsIG5ldyByYXcgdmFsdWUgdG8gcGFzcyB0byB0aGlzIHdpZGdldCdzIGBidWlsZGAgbWV0aG9kXG4gKiAgIHdyaXRlSHRtbDogYm9vbCwgb3B0aW9uYWwsIGRlZmF1bHQgZmFsc2U6IGlmIHRydWUsIGFzayB0aGUgd2lkZ2V0IHRvXG4gKiAgICAgZ2VuZXJhdGUgaXRzIChuZXcpIEhUTUxcbiAqIH1cbiAqXG4gKiByZXR1cm46IHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSByZXNwb25zZSBmcm9tIHRoZSBgcmVidWlsZF9leGFtcF9nZW5lcmF0b3JfZnJvbV9qcygpYFxuICogICBmdW5jdGlvbiBpbiB0aGUgcGZzYy1leGFtcCBweXRob24gcGFja2FnZS4gVGhpcyBpcyBhIGZvcm1hdHRlZCBvYmplY3QsIHdoaWNoIGNvbnRhaW5zXG4gKiAgIGFuIGVycm9yIGxldmVsLCBlcnJvciBtZXNzYWdlLCBhbmQgcmVzdWx0IHZhbHVlIGlmIHN1Y2Nlc3NmdWwuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIHJlYnVpbGQoYXJncykge1xuICAgIGF3YWl0IHNlbGYucHlvUmVhZHk7XG4gICAgY29uc3Qge1xuICAgICAgICB1aWQsXG4gICAgICAgIHBhbmVJZCxcbiAgICAgICAgdmFsdWUgPSBudWxsLFxuICAgICAgICB3cml0ZUh0bWwgPSBmYWxzZSxcbiAgICB9ID0gYXJncztcbiAgICBjb25zdCBubSA9IHNlbGYucGZzY2lzZWh1Yi5ub3Rlc01hbmFnZXI7XG4gICAgY29uc3QgdyA9IG5tLmdldFdpZGdldCh1aWQpO1xuICAgIGNvbnN0IG9iaiA9IHcuZ2V0UHlQcm94eUNvcHkocGFuZUlkKTtcbiAgICBjb25zdCByZWJ1aWxkRnVuYyA9IHNlbGYucHlvZGlkZS5nbG9iYWxzLmdldCgncGZzY19leGFtcCcpLnJlYnVpbGRfZXhhbXBfZ2VuZXJhdG9yX2Zyb21fanM7XG4gICAgY29uc3QgcmVzcG9uc2UgPSByZWJ1aWxkRnVuYy5jYWxsS3dhcmdzKG9iaiwge3ZhbHVlOiB2YWx1ZSwgd3JpdGVfaHRtbDogd3JpdGVIdG1sfSk7XG4gICAgLy8gRGVzdHJveSBQeVByb3h5IG9mIGByZWJ1aWxkYCB0byBhdm9pZCBtZW1vcnkgbGVhay5cbiAgICAvLyBgcmVzcG9uc2VgIG9iamVjdCBkb2VzIG5vdCBuZWVkIHRvIGJlIGRlc3Ryb3llZCwgc2luY2UgaXQgd2FzIGNvbnZlcnRlZCB3aXRoIGB0b19qcygpYFxuICAgIC8vIG9uIHRoZSBweXRob24gc2lkZS5cbiAgICByZWJ1aWxkRnVuYy5kZXN0cm95KCk7XG4gICAgLy8gYHJlc3BvbnNlYCBpcyBhIE1hcC4gQ29udmVydCB0byBhbiBPYmplY3QuXG4gICAgY29uc3QgcmVzcE9iaiA9IE9iamVjdC5mcm9tRW50cmllcyhyZXNwb25zZSk7XG4gICAgcmV0dXJuIHJlc3BPYmo7XG59XG5cblxuY2xhc3MgTm90ZXNNYW5hZ2VyIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLndpZGdldHMgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgZ2V0V2lkZ2V0KHVpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aWRnZXRzLmdldCh1aWQpO1xuICAgIH1cblxuICAgIGVuc3VyZVdpZGdldCh1aWQpIHtcbiAgICAgICAgaWYgKHRoaXMud2lkZ2V0cy5oYXModWlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMud2lkZ2V0cy5nZXQodWlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHcgPSBuZXcgV2lkZ2V0KHVpZCk7XG4gICAgICAgICAgICB0aGlzLndpZGdldHMuc2V0KHVpZCwgdyk7XG4gICAgICAgICAgICByZXR1cm4gdztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGRlbGV0ZVdpZGdldCh1aWQpIHtcbiAgICAgICAgdGhpcy53aWRnZXRzLmRlbGV0ZSh1aWQpO1xuICAgIH1cblxufVxuXG5cbmNsYXNzIFdpZGdldCB7XG5cbiAgICBjb25zdHJ1Y3Rvcih1aWQpIHtcbiAgICAgICAgdGhpcy51aWQgPSB1aWQ7XG4gICAgICAgIHRoaXMucHlQcm94aWVzQnlQYW5lSWQgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgYWRkUHlQcm94eShwYW5lSWQsIHByb3h5KSB7XG4gICAgICAgIHRoaXMucHlQcm94aWVzQnlQYW5lSWQuc2V0KHBhbmVJZCwgcHJveHkpO1xuICAgIH1cblxuICAgIC8qIFRoaXMgbWV0aG9kIGlzIGludGVuZGVkIGZvciB1c2UgYnkgUHl0aG9uIGNvZGUgcnVubmluZyBpbiBQeW9kaWRlLlxuICAgICAqIFRoZSByZWFzb24gZm9yIHJldHVybmluZyBhICpjb3B5KiBvZiB0aGUgUHlQcm94eSBvYmplY3Qgd2UgaGF2ZSBzdG9yZWRcbiAgICAgKiBpcyB0aGF0IHRoaXMgcHJldmVudHMgdGhlIFB5UHJveHkgZnJvbSBiZWluZyBkZXN0cm95ZWQgYXMgYSByZXN1bHQgb2ZcbiAgICAgKiBiZWluZyBwYXNzZWQgYmFjayB0byB0aGUgUHkgc2lkZS5cbiAgICAgKiBTZWU6XG4gICAgICogICBodHRwczovL3B5b2RpZGUub3JnL2VuL3N0YWJsZS91c2FnZS90eXBlLWNvbnZlcnNpb25zLmh0bWwjY2FsbGluZy1qYXZhc2NyaXB0LWZ1bmN0aW9ucy1mcm9tLXB5dGhvblxuICAgICAqL1xuICAgIGdldFB5UHJveHlDb3B5KHBhbmVJZCkge1xuICAgICAgICBjb25zdCBwcm94eSA9IHRoaXMucHlQcm94aWVzQnlQYW5lSWQuZ2V0KHBhbmVJZCk7XG4gICAgICAgIHJldHVybiBwcm94eS5jb3B5KCk7XG4gICAgfVxuXG4gICAgZ2V0TnVtUHJveGllcygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHlQcm94aWVzQnlQYW5lSWQuc2l6ZTtcbiAgICB9XG5cbiAgICBkZXN0cm95UHJveHkocGFuZUlkKSB7XG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLnB5UHJveGllc0J5UGFuZUlkLmdldChwYW5lSWQpO1xuICAgICAgICBpZiAocCkge1xuICAgICAgICAgICAgcC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLnB5UHJveGllc0J5UGFuZUlkLmRlbGV0ZShwYW5lSWQpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cblxuLyogV2UgYnVpbGQgYSBkdW1teSBlbnZpcm9ubWVudCBzbyB0aGF0IHRoZSBzYW1lIGNvZGUgdGhhdCB3YXMgZGVzaWduZWQgdG9cbiAqIHdvcmsgd2l0aCBQeW9kaWRlIHJ1bm5pbmcgaW4gdGhlIG1haW4gcGFnZSBjYW4gYWxzbyB3b3JrIGhlcmUuXG4gKi9cbnNlbGYucGZzY2lzZWh1YiA9IHtcbiAgICBub3Rlc01hbmFnZXI6IG5ldyBOb3Rlc01hbmFnZXIoKSxcbn07XG5cblxuY29uc3QgcGVlciA9IG5ldyBEZWRpY2F0ZWRXb3JrZXJQZWVyKHNlbGYpO1xucGVlci5hZGRIYW5kbGVyKCdlY2hvJywgZWNobyk7XG5wZWVyLmFkZEhhbmRsZXIoJ3BpbmcnLCBwaW5nKTtcbnBlZXIuYWRkSGFuZGxlcignc3RhcnR1cCcsIHN0YXJ0dXApO1xucGVlci5hZGRIYW5kbGVyKCdtYWtlUHlQcm94eScsIG1ha2VQeVByb3h5KTtcbnBlZXIuYWRkSGFuZGxlcignZGVzdHJveVB5UHJveHknLCBkZXN0cm95UHlQcm94eSk7XG5wZWVyLmFkZEhhbmRsZXIoJ3JlYnVpbGQnLCByZWJ1aWxkKTtcbnBlZXIuc2V0UmVhZHkoKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/mathworker.js\n");

/***/ }),

/***/ "../../../../../../private/var/folders/72/w63wb6p530zdrq455c5zxkpm0000gn/T/tmp-4709JUkgfnxUB4Gi/dojo/dojo.js":
/*!*******************************************************************************************************************!*\
  !*** ../../../../../../private/var/folders/72/w63wb6p530zdrq455c5zxkpm0000gn/T/tmp-4709JUkgfnxUB4Gi/dojo/dojo.js ***!
  \*******************************************************************************************************************/
/***/ ((module) => {

eval("module.exports = function(userConfig, defaultConfig, global, window) { this.loaderVersion = \"1.16.4\"; (function(\n\tuserConfig,\n\tdefaultConfig\n){\n\t// summary:\n\t//\t\tThis is the \"source loader\" and is the entry point for Dojo during development. You may also load Dojo with\n\t//\t\tany AMD-compliant loader via the package main module dojo/main.\n\t// description:\n\t//\t\tThis is the \"source loader\" for Dojo. It provides an AMD-compliant loader that can be configured\n\t//\t\tto operate in either synchronous or asynchronous modes. After the loader is defined, dojo is loaded\n\t//\t\tIAW the package main module dojo/main. In the event you wish to use a foreign loader, you may load dojo as a package\n\t//\t\tvia the package main module dojo/main and this loader is not required; see dojo/package.json for details.\n\t//\n\t//\t\tIn order to keep compatibility with the v1.x line, this loader includes additional machinery that enables\n\t//\t\tthe dojo.provide, dojo.require et al API. This machinery is loaded by default, but may be dynamically removed\n\t//\t\tvia the has.js API and statically removed via the build system.\n\t//\n\t//\t\tThis loader includes sniffing machinery to determine the environment; the following environments are supported:\n\t//\n\t//\t\t- browser\n\t//\t\t- node.js\n\t//\t\t- rhino\n\t//\n\t//\t\tThis is the so-called \"source loader\". As such, it includes many optional features that may be discarded by\n\t//\t\tbuilding a customized version with the build system.\n\n\t// Design and Implementation Notes\n\t//\n\t// This is a dojo-specific adaption of bdLoad, donated to the dojo foundation by Altoviso LLC.\n\t//\n\t// This function defines an AMD-compliant (http://wiki.commonjs.org/wiki/Modules/AsynchronousDefinition)\n\t// loader that can be configured to operate in either synchronous or asynchronous modes.\n\t//\n\t// Since this machinery implements a loader, it does not have the luxury of using a load system and/or\n\t// leveraging a utility library. This results in an unpleasantly long file; here is a road map of the contents:\n\t//\n\t//\t 1. Small library for use implementing the loader.\n\t//\t 2. Define the has.js API; this is used throughout the loader to bracket features.\n\t//\t 3. Define the node.js and rhino sniffs and sniff.\n\t//\t 4. Define the loader's data.\n\t//\t 5. Define the configuration machinery.\n\t//\t 6. Define the script element sniffing machinery and sniff for configuration data.\n\t//\t 7. Configure the loader IAW the provided user, default, and sniffing data.\n\t//\t 8. Define the global require function.\n\t//\t 9. Define the module resolution machinery.\n\t//\t10. Define the module and plugin module definition machinery\n\t//\t11. Define the script injection machinery.\n\t//\t12. Define the window load detection.\n\t//\t13. Define the logging API.\n\t//\t14. Define the tracing API.\n\t//\t16. Define the AMD define function.\n\t//\t17. Define the dojo v1.x provide/require machinery--so called \"legacy\" modes.\n\t//\t18. Publish global variables.\n\t//\n\t// Language and Acronyms and Idioms\n\t//\n\t// moduleId: a CJS module identifier, (used for public APIs)\n\t// mid: moduleId (used internally)\n\t// packageId: a package identifier (used for public APIs)\n\t// pid: packageId (used internally); the implied system or default package has pid===\"\"\n\t// pack: package is used internally to reference a package object (since javascript has reserved words including \"package\")\n\t// prid: plugin resource identifier\n\t// The integer constant 1 is used in place of true and 0 in place of false.\n\t//\n\t// The \"foreign-loader\" has condition is defined if another loader is being used (e.g. webpack) and this code is only\n\t// needed for resolving module identifiers based on the config.  In this case, only the functions require.toUrl and \n\t// require.toAbsMid are supported.  The require and define functions are not supported.\n\n\t// define global\n\tvar globalObject = (function(){\n\t\tif (typeof global !== 'undefined' && typeof global !== 'function') {\n\t\t\t// global spec defines a reference to the global object called 'global'\n\t\t\t// https://github.com/tc39/proposal-global\n\t\t\t// `global` is also defined in NodeJS\n\t\t\treturn global;\n\t\t}\n\t\telse if (typeof window !== 'undefined') {\n\t\t\t// window is defined in browsers\n\t\t\treturn window;\n\t\t}\n\t\telse if (typeof self !== 'undefined') {\n\t\t\t// self is defined in WebWorkers\n\t\t\treturn self;\n\t\t}\n\t\treturn this;\n\t})();\n\n\t// define a minimal library to help build the loader\n\tvar noop = function(){\n\t\t},\n\n\t\tisEmpty = function(it){\n\t\t\tfor(var p in it){\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn 1;\n\t\t},\n\n\t\ttoString = {}.toString,\n\n\t\tisFunction = function(it){\n\t\t\treturn toString.call(it) == \"[object Function]\";\n\t\t},\n\n\t\tisString = function(it){\n\t\t\treturn toString.call(it) == \"[object String]\";\n\t\t},\n\n\t\tisArray = function(it){\n\t\t\treturn toString.call(it) == \"[object Array]\";\n\t\t},\n\n\t\tforEach = function(vector, callback){\n\t\t\tif(vector){\n\t\t\t\tfor(var i = 0; i < vector.length;){\n\t\t\t\t\tcallback(vector[i++]);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tmix = function(dest, src){\n\t\t\tfor(var p in src){\n\t\t\t\tdest[p] = src[p];\n\t\t\t}\n\t\t\treturn dest;\n\t\t},\n\n\t\tmakeError = function(error, info){\n\t\t\treturn mix(new Error(error), {src:\"dojoLoader\", info:info});\n\t\t},\n\n\t\tuidSeed = 1,\n\n\t\tuid = function(){\n\t\t\t// Returns a unique identifier (within the lifetime of the document) of the form /_d+/.\n\t\t\treturn \"_\" + uidSeed++;\n\t\t},\n\n\t\t// FIXME: how to doc window.require() api\n\n\t\t// this will be the global require function; define it immediately so we can start hanging things off of it\n\t\treq = function(\n\t\t\tconfig,\t\t  //(object, optional) hash of configuration properties\n\t\t\tdependencies, //(array of commonjs.moduleId, optional) list of modules to be loaded before applying callback\n\t\t\tcallback\t  //(function, optional) lambda expression to apply to module values implied by dependencies\n\t\t){\n\t\t\treturn contextRequire(config, dependencies, callback, 0, req);\n\t\t},\n\n\t\t// the loader uses the has.js API to control feature inclusion/exclusion; define then use throughout\n\t\tglobal = globalObject,\n\n\t\tdoc = global.document,\n\n\t\telement = doc && doc.createElement(\"DiV\"),\n\n\t\thas = req.has = function(name){\n\t\t\treturn isFunction(hasCache[name]) ? (hasCache[name] = hasCache[name](global, doc, element)) : hasCache[name];\n\t\t},\n\n\t\thasCache = has.cache = defaultConfig.hasCache;\n\n\tif (isFunction(userConfig)) {\n\t\tuserConfig = userConfig(globalObject);\n\t}\n\n\thas.add = function(name, test, now, force){\n\t\t(hasCache[name]===undefined || force) && (hasCache[name] = test);\n\t\treturn now && has(name);\n\t};\n\n\t 0 && 0;\n\tif( false ){}\n\n\t 0 && 0;\n\tif( false ){ var baseUrl, arg, rhinoArgs, i; }\n\n\t 0 && 0;\n\tif( false ){}\n\n\t// userConfig has tests override defaultConfig has tests; do this after the environment detection because\n\t// the environment detection usually sets some has feature values in the hasCache.\n\tfor(var p in userConfig.has){\n\t\thas.add(p, userConfig.has[p], 0, 1);\n\t}\n\n\t//\n\t// define the loader data\n\t//\n\n\t// the loader will use these like symbols if the loader has the traceApi; otherwise\n\t// define magic numbers so that modules can be provided as part of defaultConfig\n\tvar requested = 1,\n\t\tarrived = 2,\n\t\tnonmodule = 3,\n\t\texecuting = 4,\n\t\texecuted = 5;\n\n\tif( false ){}\n\n\tvar legacyMode = 0,\n\t\tsync = \"sync\",\n\t\txd = \"xd\",\n\t\tsyncExecStack = [],\n\t\tdojoRequirePlugin = 0,\n\t\tcheckDojoRequirePlugin = noop,\n\t\ttransformToAmd = noop,\n\t\tgetXhr;\n\tif( false ){ var XMLHTTP_PROGIDS, progid, i, locationProtocol, locationHost; }else{\n\t\treq.async = 1;\n\t}\n\n\t//\n\t// loader eval\n\t//\n\tvar eval_ =    true  ?\n\t\t// noop eval if there are csp restrictions\n\t\tfunction(){} :\n\t\t// use the function constructor so our eval is scoped close to (but not in) in the global space with minimal pollution\n\t\t0;\n\n\treq.eval =\n\t\tfunction(text, hint){\n\t\t\treturn eval_(text + \"\\r\\n//# sourceURL=\" + hint);\n\t\t};\n\n\t//\n\t// loader micro events API\n\t//\n\tvar listenerQueues = {},\n\t\terror = \"error\",\n\t\tsignal = req.signal = function(type, args){\n\t\t\tvar queue = listenerQueues[type];\n\t\t\t// notice we run a copy of the queue; this allows listeners to add/remove\n\t\t\t// other listeners without affecting this particular signal\n\t\t\tforEach(queue && queue.slice(0), function(listener){\n\t\t\t\tlistener.apply(null, isArray(args) ? args : [args]);\n\t\t\t});\n\t\t},\n\t\ton = req.on = function(type, listener){\n\t\t\t// notice a queue is not created until a client actually connects\n\t\t\tvar queue = listenerQueues[type] || (listenerQueues[type] = []);\n\t\t\tqueue.push(listener);\n\t\t\treturn {\n\t\t\t\tremove:function(){\n\t\t\t\t\tfor(var i = 0; i<queue.length; i++){\n\t\t\t\t\t\tif(queue[i]===listener){\n\t\t\t\t\t\t\tqueue.splice(i, 1);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t// configuration machinery; with an optimized/built defaultConfig, all configuration machinery can be discarded\n\t// lexical variables hold key loader data structures to help with minification; these may be completely,\n\t// one-time initialized by defaultConfig for optimized/built versions\n\tvar\n\t\taliases\n\t\t\t// a vector of pairs of [regexs or string, replacement] => (alias, actual)\n\t\t\t= [],\n\n\t\tpaths\n\t\t\t// CommonJS paths\n\t\t\t= {},\n\n\t\tpathsMapProg\n\t\t\t// list of (from-path, to-path, regex, length) derived from paths;\n\t\t\t// a \"program\" to apply paths; see computeMapProg\n\t\t\t= [],\n\n\t\tpacks\n\t\t\t// a map from packageId to package configuration object; see fixupPackageInfo\n\t\t\t= {},\n\n\t\tmap = req.map\n\t\t\t// AMD map config variable; dojo/_base/kernel needs req.map to figure out the scope map\n\t\t\t= {},\n\n\t\tmapProgs\n\t\t\t// vector of quads as described by computeMapProg; map-key is AMD map key, map-value is AMD map value\n\t\t\t= [],\n\n\t\tmodules\n\t\t\t// A hash:(mid) --> (module-object) the module namespace\n\t\t\t//\n\t\t\t// pid: the package identifier to which the module belongs (e.g., \"dojo\"); \"\" indicates the system or default package\n\t\t\t// mid: the fully-resolved (i.e., mappings have been applied) module identifier without the package identifier (e.g., \"dojo/io/script\")\n\t\t\t// url: the URL from which the module was retrieved\n\t\t\t// pack: the package object of the package to which the module belongs\n\t\t\t// executed: 0 => not executed; executing => in the process of traversing deps and running factory; executed => factory has been executed\n\t\t\t// deps: the dependency vector for this module (vector of modules objects)\n\t\t\t// def: the factory for this module\n\t\t\t// result: the result of the running the factory for this module\n\t\t\t// injected: (0 | requested | arrived) the status of the module; nonmodule means the resource did not call define\n\t\t\t// load: plugin load function; applicable only for plugins\n\t\t\t//\n\t\t\t// Modules go through several phases in creation:\n\t\t\t//\n\t\t\t// 1. Requested: some other module's definition or a require application contained the requested module in\n\t\t\t//\t  its dependency vector or executing code explicitly demands a module via req.require.\n\t\t\t//\n\t\t\t// 2. Injected: a script element has been appended to the insert-point element demanding the resource implied by the URL\n\t\t\t//\n\t\t\t// 3. Loaded: the resource injected in [2] has been evaluated.\n\t\t\t//\n\t\t\t// 4. Defined: the resource contained a define statement that advised the loader about the module. Notice that some\n\t\t\t//\t  resources may just contain a bundle of code and never formally define a module via define\n\t\t\t//\n\t\t\t// 5. Evaluated: the module was defined via define and the loader has evaluated the factory and computed a result.\n\t\t\t= {},\n\n\t\tcacheBust\n\t\t\t// query string to append to module URLs to bust browser cache\n\t\t\t= \"\",\n\n\t\tcache\n\t\t\t// hash:(mid | url)-->(function | string)\n\t\t\t//\n\t\t\t// A cache of resources. The resources arrive via a config.cache object, which is a hash from either mid --> function or\n\t\t\t// url --> string. The url key is distinguished from the mid key by always containing the prefix \"url:\". url keys as provided\n\t\t\t// by config.cache always have a string value that represents the contents of the resource at the given url. mid keys as provided\n\t\t\t// by configl.cache always have a function value that causes the same code to execute as if the module was script injected.\n\t\t\t//\n\t\t\t// Both kinds of key-value pairs are entered into cache via the function consumePendingCache, which may relocate keys as given\n\t\t\t// by any mappings *iff* the config.cache was received as part of a module resource request.\n\t\t\t//\n\t\t\t// Further, for mid keys, the implied url is computed and the value is entered into that key as well. This allows mapped modules\n\t\t\t// to retrieve cached items that may have arrived consequent to another namespace.\n\t\t\t//\n\t\t\t = {},\n\n\t\turlKeyPrefix\n\t\t\t// the prefix to prepend to a URL key in the cache.\n\t\t\t= \"url:\",\n\n\t\tpendingCacheInsert\n\t\t\t// hash:(mid)-->(function)\n\t\t\t//\n\t\t\t// Gives a set of cache modules pending entry into cache. When cached modules are published to the loader, they are\n\t\t\t// entered into pendingCacheInsert; modules are then pressed into cache upon (1) AMD define or (2) upon receiving another\n\t\t\t// independent set of cached modules. (1) is the usual case, and this case allows normalizing mids given in the pending\n\t\t\t// cache for the local configuration, possibly relocating modules.\n\t\t\t = {},\n\n\t\tdojoSniffConfig\n\t\t\t// map of configuration variables\n\t\t\t// give the data-dojo-config as sniffed from the document (if any)\n\t\t\t= {},\n\n\t\tinsertPointSibling\n\t\t\t// the nodes used to locate where scripts are injected into the document\n\t\t\t= 0;\n\n\tif( true ){\n\t\tif (false ) { var consumePendingCacheInsert; }\n\t\tvar escapeString = function(s){\n\t\t\t\treturn s.replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, function(c){ return \"\\\\\" + c; });\n\t\t\t},\n\n\t\t\tcomputeMapProg = function(map, dest){\n\t\t\t\t// This routine takes a map as represented by a JavaScript object and initializes dest, a vector of\n\t\t\t\t// quads of (map-key, map-value, refex-for-map-key, length-of-map-key), sorted decreasing by length-\n\t\t\t\t// of-map-key. The regex looks for the map-key followed by either \"/\" or end-of-string at the beginning\n\t\t\t\t// of a the search source. Notice the map-value is irrelevant to the algorithm\n\t\t\t\tdest.splice(0, dest.length);\n\t\t\t\tfor(var p in map){\n\t\t\t\t\tdest.push([\n\t\t\t\t\t\tp,\n\t\t\t\t\t\tmap[p],\n\t\t\t\t\t\tnew RegExp(\"^\" + escapeString(p) + \"(\\/|$)\"),\n\t\t\t\t\t\tp.length]);\n\t\t\t\t}\n\t\t\t\tdest.sort(function(lhs, rhs){ return rhs[3] - lhs[3]; });\n\t\t\t\treturn dest;\n\t\t\t},\n\n\t\t\tcomputeAliases = function(config, dest){\n\t\t\t\tforEach(config, function(pair){\n\t\t\t\t\t// take a fixed-up copy...\n\t\t\t\t\tdest.push([isString(pair[0]) ? new RegExp(\"^\" + escapeString(pair[0]) + \"$\") : pair[0], pair[1]]);\n\t\t\t\t});\n\t\t\t},\n\n\n\t\t\tfixupPackageInfo = function(packageInfo){\n\t\t\t\t// calculate the precise (name, location, main, mappings) for a package\n\t\t\t\tvar name = packageInfo.name;\n\t\t\t\tif(!name){\n\t\t\t\t\t// packageInfo must be a string that gives the name\n\t\t\t\t\tname = packageInfo;\n\t\t\t\t\tpackageInfo = {name:name};\n\t\t\t\t}\n\t\t\t\tpackageInfo = mix({main:\"main\"}, packageInfo);\n\t\t\t\tpackageInfo.location = packageInfo.location ? packageInfo.location : name;\n\n\t\t\t\t// packageMap is deprecated in favor of AMD map\n\t\t\t\tif(packageInfo.packageMap){\n\t\t\t\t\tmap[name] = packageInfo.packageMap;\n\t\t\t\t}\n\n\t\t\t\tif(!packageInfo.main.indexOf(\"./\")){\n\t\t\t\t\tpackageInfo.main = packageInfo.main.substring(2);\n\t\t\t\t}\n\n\t\t\t\t// now that we've got a fully-resolved package object, push it into the configuration\n\t\t\t\tpacks[name] = packageInfo;\n\t\t\t},\n\n\t\t\tdelayedModuleConfig\n\t\t\t\t// module config cannot be consumed until the loader is completely initialized; therefore, all\n\t\t\t\t// module config detected during booting is memorized and applied at the end of loader initialization\n\t\t\t\t// TODO: this is a bit of a kludge; all config should be moved to end of loader initialization, but\n\t\t\t\t// we'll delay this chore and do it with a final loader 1.x cleanup after the 2.x loader prototyping is complete\n\t\t\t\t= [],\n\n\n\t\t\tconfig = function(config, booting, referenceModule){\n\t\t\t\tfor(var p in config){\n\t\t\t\t\tif(p==\"waitSeconds\"){\n\t\t\t\t\t\treq.waitms = (config[p] || 0) * 1000;\n\t\t\t\t\t}\n\t\t\t\t\tif(p==\"cacheBust\"){\n\t\t\t\t\t\tcacheBust = config[p] ? (isString(config[p]) ? config[p] : (new Date()).getTime() + \"\") : \"\";\n\t\t\t\t\t}\n\t\t\t\t\tif(p==\"baseUrl\" || p==\"combo\"){\n\t\t\t\t\t\treq[p] = config[p];\n\t\t\t\t\t}\n\t\t\t\t\tif( false){ var mode; }\n\t\t\t\t\tif(config[p]!==hasCache){\n\t\t\t\t\t\t// accumulate raw config info for client apps which can use this to pass their own config\n\t\t\t\t\t\treq.rawConfig[p] = config[p];\n\t\t\t\t\t\tp!=\"has\" && has.add(\"config-\"+p, config[p], 0, booting);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// make sure baseUrl exists\n\t\t\t\tif(!req.baseUrl){\n\t\t\t\t\treq.baseUrl = \"./\";\n\t\t\t\t}\n\t\t\t\t// make sure baseUrl ends with a slash\n\t\t\t\tif(!/\\/$/.test(req.baseUrl)){\n\t\t\t\t\treq.baseUrl += \"/\";\n\t\t\t\t}\n\n\t\t\t\t// now do the special work for has, packages, packagePaths, paths, aliases, and cache\n\n\t\t\t\tfor(p in config.has){\n\t\t\t\t\thas.add(p, config.has[p], 0, booting);\n\t\t\t\t}\n\n\t\t\t\t// for each package found in any packages config item, augment the packs map owned by the loader\n\t\t\t\tforEach(config.packages, fixupPackageInfo);\n\n\t\t\t\t// for each packagePath found in any packagePaths config item, augment the packageConfig\n\t\t\t\t// packagePaths is deprecated; remove in 2.0\n\t\t\t\tfor(var baseUrl in config.packagePaths){\n\t\t\t\t\tforEach(config.packagePaths[baseUrl], function(packageInfo){\n\t\t\t\t\t\tvar location = baseUrl + \"/\" + packageInfo;\n\t\t\t\t\t\tif(isString(packageInfo)){\n\t\t\t\t\t\t\tpackageInfo = {name:packageInfo};\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpackageInfo.location = location;\n\t\t\t\t\t\tfixupPackageInfo(packageInfo);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\t// notice that computeMapProg treats the dest as a reference; therefore, if/when that variable\n\t\t\t\t// is published (see dojo-publish-privates), the published variable will always hold a valid value.\n\n\t\t\t\t// this must come after all package processing since package processing may mutate map\n\t\t\t\tcomputeMapProg(mix(map, config.map), mapProgs);\n\t\t\t\tforEach(mapProgs, function(item){\n\t\t\t\t\titem[1] = computeMapProg(item[1], []);\n\t\t\t\t\tif(item[0]==\"*\"){\n\t\t\t\t\t\tmapProgs.star = item;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t// push in any paths and recompute the internal pathmap\n\t\t\t\tcomputeMapProg(mix(paths, config.paths), pathsMapProg);\n\n\t\t\t\t// aliases\n\t\t\t\tcomputeAliases(config.aliases, aliases);\n\n\t\t\t\tif (false ) { var module; }\n\t\t\t\tsignal(\"config\", [config, req.rawConfig]);\n\t\t\t};\n\n\t\t//\n\t\t// execute the various sniffs; userConfig can override and value\n\t\t//\n\n\t\tif( false ){ var scripts, i, script, dojoDir, src, match; }\n\n\t\tif( false ){ var doh; }\n\n\t\t// configure the loader; let the user override defaults\n\t\treq.rawConfig = {};\n\t\tconfig(defaultConfig, 1);\n\n\t\t// do this before setting userConfig/sniffConfig to allow userConfig/sniff overrides\n\t\tif( false ){}\n\n\t\tconfig(userConfig, 1);\n\t\tconfig(dojoSniffConfig, 1);\n\n\t}else{}\n\n\n\tif (false ) { var injectDependencies, contextRequire, createRequire, execQ, defQ, waiting, setRequested, setArrived, execComplete, comboPending, combosPending, comboPendingTimer; }\n\n\tvar runMapProg = function(targetMid, map){\n\t\t\t// search for targetMid in map; return the map item if found; falsy otherwise\n\t\t\tif(map){\n\t\t\tfor(var i = 0; i < map.length; i++){\n\t\t\t\tif(map[i][2].test(targetMid)){\n\t\t\t\t\treturn map[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\treturn 0;\n\t\t},\n\n\t\tcompactPath = function(path){\n\t\t\tvar result = [],\n\t\t\t\tsegment, lastSegment;\n\t\t\tpath = path.replace(/\\\\/g, '/').split('/');\n\t\t\twhile(path.length){\n\t\t\t\tsegment = path.shift();\n\t\t\t\tif(segment==\"..\" && result.length && lastSegment!=\"..\"){\n\t\t\t\t\tresult.pop();\n\t\t\t\t\tlastSegment = result[result.length - 1];\n\t\t\t\t}else if(segment!=\".\"){\n\t\t\t\t\tresult.push(lastSegment= segment);\n\t\t\t\t} // else ignore \".\"\n\t\t\t}\n\t\t\treturn result.join(\"/\");\n\t\t},\n\n\t\tmakeModuleInfo = function(pid, mid, pack, url){\n\t\t\tif( false ){ var xd; }else{\n\t\t\t\treturn {pid:pid, mid:mid, pack:pack, url:url, executed:0, def:0};\n\t\t\t}\n\t\t},\n\n\t\tgetModuleInfo_ = function(mid, referenceModule, packs, modules, baseUrl, mapProgs, pathsMapProg, aliases, alwaysCreate, fromPendingCache){\n\t\t\t// arguments are passed instead of using lexical variables so that this function my be used independent of the loader (e.g., the builder)\n\t\t\t// alwaysCreate is useful in this case so that getModuleInfo never returns references to real modules owned by the loader\n\t\t\tvar pid, pack, midInPackage, mapItem, url, result, isRelative, requestedMid;\n\t\t\trequestedMid = mid;\n\t\t\tisRelative = /^\\./.test(mid);\n\t\t\tif(/(^\\/)|(\\:)|(\\.js$)/.test(mid) || (isRelative && !referenceModule)){\n\t\t\t\t// absolute path or protocol of .js filetype, or relative path but no reference module and therefore relative to page\n\t\t\t\t// whatever it is, it's not a module but just a URL of some sort\n\t\t\t\t// note: pid===0 indicates the routine is returning an unmodified mid\n\n\t\t\t\treturn makeModuleInfo(0, mid, 0, mid);\n\t\t\t}else{\n\t\t\t\t// relative module ids are relative to the referenceModule; get rid of any dots\n\t\t\t\tmid = compactPath(isRelative ? (referenceModule.mid + \"/../\" + mid) : mid);\n\t\t\t\tif(/^\\./.test(mid)){\n\t\t\t\t\tthrow makeError(\"irrationalPath\", mid);\n\t\t\t\t}\n\t\t\t\t// at this point, mid is an absolute mid\n\n\t\t\t\t// map the mid\n\t\t\t\tif(!fromPendingCache && !isRelative && mapProgs.star){\n\t\t\t\t\tmapItem = runMapProg(mid, mapProgs.star[1]);\n\t\t\t\t}\n\t\t\t\tif(!mapItem && referenceModule){\n\t\t\t\t\tmapItem = runMapProg(referenceModule.mid, mapProgs);\n\t\t\t\t\tmapItem = mapItem && runMapProg(mid, mapItem[1]);\n\t\t\t\t}\n\n\t\t\t\tif(mapItem){\n\t\t\t\t\tmid = mapItem[1] + mid.substring(mapItem[3]);\n\t\t\t\t\t}\n\n\t\t\t\tmatch = mid.match(/^([^\\/]+)(\\/(.+))?$/);\n\t\t\t\tpid = match ? match[1] : \"\";\n\t\t\t\tif((pack = packs[pid])){\n\t\t\t\t\tmid = pid + \"/\" + (midInPackage = (match[3] || pack.main));\n\t\t\t\t}else{\n\t\t\t\t\tpid = \"\";\n\t\t\t\t}\n\n\t\t\t\t// search aliases\n\t\t\t\tvar candidateLength = 0,\n\t\t\t\t\tcandidate = 0;\n\t\t\t\tforEach(aliases, function(pair){\n\t\t\t\t\tvar match = mid.match(pair[0]);\n\t\t\t\t\tif(match && match.length>candidateLength){\n\t\t\t\t\t\tcandidate = isFunction(pair[1]) ? mid.replace(pair[0], pair[1]) : pair[1];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif(candidate){\n\t\t\t\t\treturn getModuleInfo_(candidate, 0, packs, modules, baseUrl, mapProgs, pathsMapProg, aliases, alwaysCreate);\n\t\t\t\t}\n\n\t\t\t\tresult = modules[mid];\n\t\t\t\tif(result){\n\t\t\t\t\treturn alwaysCreate ? makeModuleInfo(result.pid, result.mid, result.pack, result.url) : modules[mid];\n\t\t\t\t}\n\t\t\t}\n\t\t\t// get here iff the sought-after module does not yet exist; therefore, we need to compute the URL given the\n\t\t\t// fully resolved (i.e., all relative indicators and package mapping resolved) module id\n\n\t\t\t// note: pid!==0 indicates the routine is returning a url that has .js appended unmodified mid\n\t\t\tmapItem = runMapProg(mid, pathsMapProg);\n\t\t\tif(mapItem){\n\t\t\t\turl = mapItem[1] + mid.substring(mapItem[3]);\n\t\t\t}else if(pid){\n\t\t\t\turl = (pack.location.slice(-1) === '/' ? pack.location.slice(0, -1) : pack.location) + \"/\" + midInPackage;\n\t\t\t}else if( false ){}else{\n\t\t\t\turl = mid;\n\t\t\t}\n\t\t\t// if result is not absolute, add baseUrl\n\t\t\tif(!(/(^\\/)|(\\:)/.test(url))){\n\t\t\t\turl = baseUrl + url;\n\t\t\t}\n\t\t\turl += \".js\";\n\t\t\treturn makeModuleInfo(pid, mid, pack, compactPath(url));\n\t\t},\n\n\t\tgetModuleInfo = function(mid, referenceModule, fromPendingCache){\n\t\t\treturn getModuleInfo_(mid, referenceModule, packs, modules, req.baseUrl, mapProgs, pathsMapProg, aliases, undefined, fromPendingCache);\n\t\t};\n\n\tif (false ) { var resolvePluginResourceId, dynamicPluginUidGenerator, getModule; }\n\n\tvar toAbsMid = req.toAbsMid = function(mid, referenceModule){\n\t\t\treturn getModuleInfo(mid, referenceModule).mid;\n\t\t},\n\n\t\ttoUrl = req.toUrl = function(name, referenceModule){\n\t\t\tvar moduleInfo = getModuleInfo(name+\"/x\", referenceModule),\n\t\t\t\turl= moduleInfo.url;\n\t\t\treturn fixupUrl(moduleInfo.pid===0 ?\n\t\t\t\t// if pid===0, then name had a protocol or absolute path; either way, toUrl is the identify function in such cases\n\t\t\t\tname :\n\t\t\t\t// \"/x.js\" since getModuleInfo automatically appends \".js\" and we appended \"/x\" to make name look like a module id\n\t\t\t\turl.substring(0, url.length-5)\n\t\t\t);\n\t\t};\n\n\tif (false ) { var nonModuleProps, makeCjs, cjsRequireModule, cjsExportsModule, cjsModuleModule, runFactory, abortExec, defOrder, promoteModuleToPlugin, resolvePluginLoadQ, finishExec, circleTrace, execModule, checkCompleteGuard, guardCheckComplete, checkComplete; }\n\n\tvar fixupUrl= typeof userConfig.fixupUrl == \"function\" ? userConfig.fixupUrl : function(url){\n\t\t\turl += \"\"; // make sure url is a Javascript string (some paths may be a Java string)\n\t\t\treturn url + (cacheBust ? ((/\\?/.test(url) ? \"&\" : \"?\") + cacheBust) : \"\");\n\t\t};\n\n\n\n\tif( false ){}\n\n\tif( false ){ var injectPlugin, cached, injectingModule, injectingCachedModule, evalModuleText, injectModule, defineModule, runDefQ; }\n\n\tvar timerId = 0,\n\t\tclearTimer = noop,\n\t\tstartTimer = noop;\n\tif( false ){}\n\n\tif ( false ) {}\n\n\tif( false){ var scripts, i, script, domOn, windowOnLoadListener; }\n\n\tif( false ){}else{\n\t\treq.log = noop;\n\t}\n\n\tif( false ){ var trace; }else{\n\t\treq.trace = noop;\n\t}\n\tif (false ) { var def; } else {\n\t\tvar def = noop;\n\t}\n\t// allow config to override default implementation of named functions; this is useful for\n\t// non-browser environments, e.g., overriding injectUrl, getText, log, etc. in node.js, Rhino, etc.\n\t// also useful for testing and monkey patching loader\n\tmix(mix(req, defaultConfig.loaderPatch), userConfig.loaderPatch);\n\n\t// now that req is fully initialized and won't change, we can hook it up to the error signal\n\ton(error, function(arg){\n\t\ttry{\n\t\t\tconsole.error(arg);\n\t\t\tif(arg instanceof Error){\n\t\t\t\tfor(var p in arg){\n\t\t\t\t\tconsole.log(p + \":\", arg[p]);\n\t\t\t\t}\n\t\t\t\tconsole.log(\".\");\n\t\t\t}\n\t\t}catch(e){}\n\t});\n\n\t// always publish these\n\tmix(req, {\n\t\tuid:uid,\n\t\tcache:cache,\n\t\tpacks:packs\n\t});\n\n\n\tif( false ){}\n\n\t// the loader can be defined exactly once; look for global define which is the symbol AMD loaders are\n\t// *required* to define (as opposed to require, which is optional)\n\tif(global.define){\n\t\tif( false ){}\n\t\treturn;\n\t}else{\n\t\tglobal.define = def;\n\t\tglobal.require = req;\n\t\tif( false ){}\n\t}\n\n\tif( false){ var plugins, pluginName; }\n\n\tif( false ){ var bootDeps, bootCallback; }\n\tif(false ){}\n})\n.call(this, userConfig, defaultConfig);};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../../../../../private/var/folders/72/w63wb6p530zdrq455c5zxkpm0000gn/T/tmp-4709JUkgfnxUB4Gi/dojo/dojo.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/dojo-webpack-plugin */
/******/ 	(() => {
/******/ 		(function() { /* Start dojo-webpack-plugin extensions */
/******/ 				function mix(dest, src) { // eslint-disable-line no-unused-vars
/******/ 					for(var n in src) dest[n] = src[n];
/******/ 					return dest;
/******/ 				}
/******/ 		
/******/ 				function toUrl(name, referenceModule) {
/******/ 					return loaderScope.require.toUrl(name, referenceModule);
/******/ 				}
/******/ 		
/******/ 				function toAbsMid(name, referenceModule) {
/******/ 					return loaderScope.require.toAbsMid(name, referenceModule);
/******/ 				}
/******/ 		
/******/ 				// dojo require function.
/******/ 				function req(config, dependencies, callback) {
/******/ 					return contextRequire(config, dependencies, callback, 0, req);
/******/ 				};
/******/ 		
/******/ 				function createContextRequire(module) { // eslint-disable-line no-unused-vars
/******/ 					if (!module) return req;
/******/ 					var moduleId = module.absMid;
/******/ 					if (!moduleId && req.absMidsById[module.id]) {
/******/ 						moduleId = req.absMidsById[module.id];
/******/ 					}
/******/ 					if (!moduleId) return req;
/******/ 					var result = function(a1, a2, a3) {
/******/ 						return contextRequire(a1, a2, a3, moduleId, req);
/******/ 					};
/******/ 					for (var p in req) {
/******/ 						if (req.hasOwnProperty(p)) {
/******/ 							result[p] = req[p];
/******/ 						}
/******/ 					}
/******/ 					result.toUrl = function(name) {
/******/ 						return toUrl(name, moduleId ? {mid: moduleId} : null);
/******/ 					};
/******/ 					result.toAbsMid = function(name) {
/******/ 						return toAbsMid(name, moduleId ? {mid: moduleId} : null);
/******/ 					};
/******/ 		
/******/ 					if (req.undef) {
/******/ 						result.undef = function(mid) {
/******/ 							req.undef(mid, moduleId);
/******/ 						};
/******/ 					}
/******/ 					return result;
/******/ 				}
/******/ 		
/******/ 				function registerAbsMids(absMids) { // eslint-disable-line no-unused-vars
/******/ 					for (var s in absMids) {
/******/ 						req.absMids[s] = absMids[s];
/******/ 						if (!req.absMidsById[absMids[s]]) {
/******/ 							req.absMidsById[absMids[s]] = s;
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 		
/******/ 				function resolveTernaryHasExpression(expr) { // eslint-disable-line no-unused-vars
/******/ 					// Expects an expression of the form supported by dojo/has.js loader, except that module identifiers are
/******/ 					// integers corresponding to webpack module ids.  Returns a module reference if evaluation of the expression
/******/ 					// using the currently defined features returns a module id, or else undefined.
/******/ 		
/******/ 					var has = findModule("dojo/has", null, false);
/******/ 					var id = has.normalize(expr, function(arg){return arg;});
/******/ 					return id && __webpack_require__(id) || undefined;
/******/ 				}
/******/ 		
/******/ 				function findModule(mid, referenceModule, noInstall, asModuleObj) {
/******/ 					mid = mid.split("!").map(function(segment) {
/******/ 						var isRelative = segment.charAt(0) === '.';
/******/ 						if(isRelative && !referenceModule){
/******/ 							return segment;
/******/ 						}
/******/ 						return toAbsMid(segment, referenceModule ? {mid: referenceModule} : null);
/******/ 					}).join("!");
/******/ 					var result;
/******/ 					if (mid in req.absMids && __webpack_require__.m[req.absMids[mid]]) {
/******/ 						if (noInstall) {
/******/ 							var module = __webpack_module_cache__[req.absMids[mid]];
/******/ 							result = module && (asModuleObj ? module : module.exports);
/******/ 						} else {
/******/ 							result = __webpack_require__(req.absMids[mid]);
/******/ 						}
/******/ 					}
/******/ 					if (!result) {
/******/ 						throw new Error('Module not found: ' + mid);
/******/ 					}
/******/ 					return result;
/******/ 				}
/******/ 		
/******/ 				function dojoModuleFromWebpackModule(webpackModule) { // eslint-disable-line no-unused-vars
/******/ 					if (webpackModule.absMid) return webpackModule;  // Already converted
/******/ 					var result = {i:webpackModule.id};
/******/ 					var id = req.absMidsById[webpackModule.id];
/******/ 					if (id) {
/******/ 						result.id = result.absMid = id;
/******/ 					}
/******/ 					Object.defineProperty(result, "exports", {
/******/ 						get: function() { return webpackModule.exports;},
/******/ 						set: function(value) {webpackModule.exports = value;},
/******/ 						enumerable: true,
/******/ 						configurable: true
/******/ 					});
/******/ 					return result;
/******/ 				}
/******/ 		
/******/ 				function contextRequire(a1, a2, a3, referenceModule, req) { // eslint-disable-line no-shadow
/******/ 					var type = ({}.toString).call(a1);
/******/ 					if (type === '[object String]') {
/******/ 						// a3 is passed by require calls injected into dependency arrays for dependencies specified
/******/ 						// as identifiers (vs. string literals).
/******/ 						var noInstall = !(a3 === false);
/******/ 						var m = findModule(a1, referenceModule, noInstall);
/******/ 						if (typeof m === 'object' && m.__DOJO_WEBPACK_DEFINE_PROMISE__) {
/******/ 							throw new Error('Module not found: ' + a1);
/******/ 						}
/******/ 						return m;
/******/ 					} else if (type === '[object Object]') {
/******/ 						throw new Error('Require config is not supported by WebPack');
/******/ 					}
/******/ 					if (type === '[object Array]') {
/******/ 						var modules = [], callback = a2, errors = [];
/******/ 						a1.forEach(function (mid) {
/******/ 							try {
/******/ 								modules.push(findModule(mid, referenceModule));
/******/ 							} catch (e) {
/******/ 								errors.push({mid: mid, error: e});
/******/ 							}
/******/ 						});
/******/ 						if (errors.length === 0) {
/******/ 							if (callback) {
/******/ 								if (false && isDefinePromise(modules)) { // eslint-disable-line no-undef
/******/ 									Promise.all(wrapPromises(modules)).then(function(deps) { // eslint-disable-line no-undef
/******/ 										callback.apply(this, unwrapPromises(deps)); // eslint-disable-line no-undef
/******/ 									}.bind(this)).catch(function(err){console.error(err);});
/******/ 								} else {
/******/ 									callback.apply(this, modules);
/******/ 								}
/******/ 							}
/******/ 						} else {
/******/ 							var error = new Error("findModules");
/******/ 							error.src = "dojo-webpack-plugin";
/******/ 							error.info = errors;
/******/ 							req.signal("error", error);
/******/ 						}
/******/ 						return req;
/******/ 					} else {
/******/ 						throw new Error('Unsupported require call');
/******/ 					}
/******/ 				}
/******/ 				req.toUrl = toUrl;
/******/ 				req.toAbsMid = toAbsMid;
/******/ 				req.absMids = {};
/******/ 				req.absMidsById = [];
/******/ 				req.async = 1;
/******/ 			var globalObj = this||window;
/******/ 			registerAbsMids({
/******/ 				// "./src/mathworker.js" = "./src/mathworker.js"
/******/ 				// "browser-peers/src/dedworkerpeer" = "./node_modules/browser-peers/src/dedworkerpeer.js"
/******/ 				// "browser-peers/src/peer" = "./node_modules/browser-peers/src/peer.js"
/******/ 				// "browser-peers/src/errors" = "./node_modules/browser-peers/src/errors.js"
/******/ 				// "browser-peers/src/util" = "./node_modules/browser-peers/src/util.js"
/******/ 				// "/var/folders/72/w63wb6p530zdrq455c5zxkpm0000gn/T/tmp-4709JUkgfnxUB4Gi/dojo/dojo.js" = "../../../../../../private/var/folders/72/w63wb6p530zdrq455c5zxkpm0000gn/T/tmp-4709JUkgfnxUB4Gi/dojo/dojo.js"
/******/ 			});
/******/ 		
/******/ 			globalObj.require = req;
/******/ 				(self["webpackChunkpfsc_ise"] = self["webpackChunkpfsc_ise"] || []).registerAbsMids = registerAbsMids;
/******/ 		
/******/ 			// expose the Dojo compatibility functions as a properties of __webpack_require__
/******/ 			if (__webpack_require__.dj && __webpack_require__.dj.name !== 'dojo-webpack-plugin') throw new Error("__webpack_require__.dj name collision.")
/******/ 			__webpack_require__.dj = {
/******/ 				name: 'dojo-webpack-plugin',
/******/ 				r: req,
/******/ 				c: createContextRequire,
/******/ 				m: dojoModuleFromWebpackModule,
/******/ 				h: resolveTernaryHasExpression,
/******/ 			};
/******/ 			var loaderScope = Object.create(globalObj, {
/******/ 			   document:{value: globalObj.document},
/******/ 			});
/******/ 			Object.defineProperties(loaderScope, {
/******/ 			   window:{value:loaderScope},
/******/ 			   global:{value:loaderScope}
/******/ 			});
/******/ 			loaderScope.define = loaderScope.require = undefined
/******/ 			globalObj.dojoConfig = globalObj.dojoConfig || {}
/******/ 			var userConfig = mix(globalObj.dojoConfig, ({'packages':[({'name':'dojo','location':'static/dojo'}),({'name':'dijit','location':'static/dijit'}),({'name':'dojox','location':'static/dojox'})],'paths':({'ise':'src'})}));
/******/ 			var defaultConfig = ({'hasCache':({'webpack':1,'host-browser':1,'dom':1,'dojo-loader':1,'dojo-has-api':1,'dojo-dom-ready-api':1,'dojo-sniff':1,'dojo-test-sniff':1,'config-deferredInstrumentation':1,'config-tlmSiblingOfDojo':1})});
/******/ 			var dojoLoader = __webpack_require__("../../../../../../private/var/folders/72/w63wb6p530zdrq455c5zxkpm0000gn/T/tmp-4709JUkgfnxUB4Gi/dojo/dojo.js");
/******/ 			dojoLoader.call(loaderScope, userConfig, defaultConfig, loaderScope, loaderScope);
/******/ 			Object.keys(loaderScope.require.packs).forEach(function(key) {
/******/ 				var pkg = loaderScope.require.packs[key];
/******/ 				if ((/(^\/)|(\:)/.test(pkg.main)	// main path is absolute
/******/ 				    || pkg.main.split('/').reduce(function(acc, pathComp) {
/******/ 							if (acc < 0 || pathComp === '.') return acc;
/******/ 							return (pathComp === '..' ? --acc : ++acc);
/******/ 						}, 0) <= 0) // main path is outside package
/******/ 						&& typeof pkg.realMain === 'undefined'	// hasn't already been adjusted
/******/ 				) {
/******/ 					pkg.realMain = pkg.main;
/******/ 					pkg.main = '';
/******/ 				}
/******/ 			});
/******/ 			function toAbsMid(name, referenceModule) {
/******/ 				var absMid = loaderScope.require.originalToAbsMid(name, referenceModule);
/******/ 				if (absMid.indexOf('/') === absMid.length-1) {
/******/ 					var pkgName = absMid.substring(0, absMid.length-1);
/******/ 					var pkg = loaderScope.require.packs[pkgName];
/******/ 					if (pkg && pkg.realMain) {
/******/ 						absMid = pkgName;
/******/ 					}
/******/ 				}
/******/ 				return absMid;
/******/ 			}
/******/ 			function toUrl(name, referenceModule) {
/******/ 				var url = loaderScope.require.originalToUrl(name, referenceModule);
/******/ 				var pkg = loaderScope.require.packs[name];
/******/ 				if (pkg && pkg.realMain) {
/******/ 					var parts = url.split('?');
/******/ 					if (/(^\/)|(\:)/.test(pkg.realMain)) {
/******/ 						// absolute URL
/******/ 						parts[0] = pkg.realMain;
/******/ 					} else {
/******/ 						// relative URL
/******/ 						parts[0] = parts[0] + '/' + pkg.realMain;
/******/ 					}
/******/ 					url = parts.join('?');
/******/ 				}
/******/ 				return url;
/******/ 			}
/******/ 			loaderScope.require.originalToAbsMid = loaderScope.require.toAbsMid;
/******/ 			loaderScope.require.originalToUrl = loaderScope.require.toUrl;
/******/ 			loaderScope.require.toAbsMid = toAbsMid;
/******/ 			loaderScope.require.toUrl = toUrl;
/******/ 			['baseUrl','has','rawConfig','on','signal'].forEach(function(name) {req[name] = loaderScope.require[name]})
/******/ 			var absMidsWaiting = globalObj["webpackChunkpfsc_ise"].absMidsWaiting;
/******/ 			if (absMidsWaiting) {
/******/ 			   absMidsWaiting.forEach(registerAbsMids);
/******/ 			   delete globalObj["webpackChunkpfsc_ise"].absMidsWaiting;
/******/ 			}
/******/ 		})(); /* End dojo-webpack-plugin extensions */
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/mathworker.js");
/******/ 	
/******/ })()
;